{
  "id": "9d05091c1338df17f34d500874e2ab75",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.6",
  "solcLongVersion": "0.7.6+commit.7338295f",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol": {
        "content": "// SPDX-License-Identifier: CC0-1.0\n/* ERC1820 Pseudo-introspection Registry Contract\n * This standard defines a universal registry smart contract where any address (contract or regular account) can\n * register which interface it supports and which smart contract is responsible for its implementation.\n *\n * Written in 2019 by Jordi Baylina and Jacques Dafflon\n *\n * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to\n * this software to the public domain worldwide. This software is distributed without any warranty.\n *\n * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see\n * <http://creativecommons.org/publicdomain/zero/1.0/>.\n */\npragma solidity >0.5.0 <0.8.0;\n\n/// @dev The interface a contract MUST implement if it is the implementer of\n/// some (other) interface for any address other than itself.\ninterface ERC1820ImplementerInterface {\n    /// @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\n    /// @param interfaceHash keccak256 hash of the name of the interface\n    /// @param addr Address for which the contract will implement the interface\n    /// @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\n}\n\n/**\n * @title ERC1820 Pseudo-introspection Registry Contract\n * @author Jordi Baylina and Jacques Dafflon\n * @dev This contract is the official implementation of the ERC1820 Registry\n * For more details, see https://eips.ethereum.org/EIPS/eip-1820\n *\n * Compiler used: optimistic-solc\n * Runtime target: OVM\n */\ncontract ERC1820Registry {\n    bytes4 constant internal INVALID_ID = 0xffffffff;\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\n    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n\n    mapping(address => mapping(bytes32 => address)) internal interfaces;\n    mapping(address => address) internal managers;\n    mapping(address => mapping(bytes4 => bool)) internal erc165Cached;\n\n    /// @notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\n    /// @notice Indicates 'newManager' is the address of the new manager for 'addr'.\n    event ManagerChanged(address indexed addr, address indexed newManager);\n\n    /// @notice Query if an address implements an interface and through which contract.\n    /// @param _addr Address being queried for the implementer of an interface.\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n    /// E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.\n    /// @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\n    /// or '0' if '_addr' did not register an implementer for this interface.\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address) {\n        address addr = _addr == address(0) ? msg.sender : _addr;\n        if (isERC165Interface(_interfaceHash)) {\n            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\n            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : address(0);\n        }\n        return interfaces[addr][_interfaceHash];\n    }\n\n    /// @notice Sets the contract which implements a specific interface for an address.\n    /// Only the manager defined for that address can set it.\n    /// (Each address is the manager for itself until it sets a new manager.)\n    /// @param _addr Address for which to set the interface.\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n    /// E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.\n    /// @param _implementer Contract address implementing '_interfaceHash' for '_addr'.\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {\n        address addr = _addr == address(0) ? msg.sender : _addr;\n        require(getManager(addr) == msg.sender, \"Not the manager\");\n\n        require(!isERC165Interface(_interfaceHash), \"Must not be an ERC165 hash\");\n        if (_implementer != address(0) && _implementer != msg.sender) {\n            require(\n                ERC1820ImplementerInterface(_implementer)\n                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC1820_ACCEPT_MAGIC,\n                \"Does not implement the interface\"\n            );\n        }\n        interfaces[addr][_interfaceHash] = _implementer;\n        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\n    }\n\n    /// @notice Sets '_newManager' as manager for '_addr'.\n    /// The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\n    /// @param _addr Address for which to set the new manager.\n    /// @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\n    function setManager(address _addr, address _newManager) external {\n        require(getManager(_addr) == msg.sender, \"Not the manager\");\n        managers[_addr] = _newManager == _addr ? address(0) : _newManager;\n        emit ManagerChanged(_addr, _newManager);\n    }\n\n    /// @notice Get the manager of an address.\n    /// @param _addr Address for which to return the manager.\n    /// @return Address of the manager for a given address.\n    function getManager(address _addr) public view returns(address) {\n        // By default the manager of an address is the same address\n        if (managers[_addr] == address(0)) {\n            return _addr;\n        } else {\n            return managers[_addr];\n        }\n    }\n\n    /// @notice Compute the keccak256 hash of an interface given its name.\n    /// @param _interfaceName Name of the interface.\n    /// @return The keccak256 hash of an interface name.\n    function interfaceHash(string calldata _interfaceName) external pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_interfaceName));\n    }\n\n    /* --- ERC165 Related Functions --- */\n    /* --- Developed in collaboration with William Entriken. --- */\n\n    /// @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n    /// @param _contract Address of the contract for which to update the cache.\n    /// @param _interfaceId ERC165 interface for which to update the cache.\n    function updateERC165Cache(address _contract, bytes4 _interfaceId) external {\n        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(\n            _contract, _interfaceId) ? _contract : address(0);\n        erc165Cached[_contract][_interfaceId] = true;\n    }\n\n    /// @notice Checks whether a contract implements an ERC165 interface or not.\n    //  If the result is not cached a direct lookup on the contract address is performed.\n    //  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n    //  'updateERC165Cache' with the contract address.\n    /// @param _contract Address of the contract to check.\n    /// @param _interfaceId ERC165 interface to check.\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\n    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view returns (bool) {\n        if (!erc165Cached[_contract][_interfaceId]) {\n            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\n        }\n        return interfaces[_contract][_interfaceId] == _contract;\n    }\n\n    /// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n    /// @param _contract Address of the contract to check.\n    /// @param _interfaceId ERC165 interface to check.\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\n    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view returns (bool) {\n        uint256 success;\n        uint256 result;\n\n        (success, result) = noThrowCall(_contract, ERC165ID);\n        if (success == 0 || result == 0) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, INVALID_ID);\n        if (success == 0 || result != 0) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, _interfaceId);\n        if (success == 1 && result == 1) {\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\n    /// @param _interfaceHash The hash to check.\n    /// @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise.\n    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\n        return _interfaceHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\n    }\n\n    /// @dev Make a call on a contract without throwing if the function does not exist.\n    function noThrowCall(address _contract, bytes4 _interfaceId)\n        internal view returns (uint256 success, uint256 result)\n    {\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n            mstore(x, erc165ID)                // Place signature at beginning of empty storage\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n            success := staticcall(\n                30000,                         // 30k gas\n                _contract,                     // To addr\n                x,                             // Inputs are stored at location x\n                0x24,                          // Inputs are 36 (4 + 32) bytes long\n                x,                             // Store output over input (saves space)\n                0x20                           // Outputs are 32 bytes long\n            )\n\n            result := mload(x)                 // Load the result\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none",
        "useLiteralContent": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "storageLayout",
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol": {
        "ERC1820ImplementerInterface": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "interfaceHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "name": "canImplementInterfaceForAddress",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "The interface a contract MUST implement if it is the implementer of some (other) interface for any address other than itself.",
            "kind": "dev",
            "methods": {
              "canImplementInterfaceForAddress(bytes32,address)": {
                "params": {
                  "addr": "Address for which the contract will implement the interface",
                  "interfaceHash": "keccak256 hash of the name of the interface"
                },
                "returns": {
                  "_0": "ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "canImplementInterfaceForAddress(bytes32,address)": "249cb3fa"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The interface a contract MUST implement if it is the implementer of some (other) interface for any address other than itself.\",\"kind\":\"dev\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"params\":{\"addr\":\"Address for which the contract will implement the interface\",\"interfaceHash\":\"keccak256 hash of the name of the interface\"},\"returns\":{\"_0\":\"ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"notice\":\"Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol\":\"ERC1820ImplementerInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n/* ERC1820 Pseudo-introspection Registry Contract\\n * This standard defines a universal registry smart contract where any address (contract or regular account) can\\n * register which interface it supports and which smart contract is responsible for its implementation.\\n *\\n * Written in 2019 by Jordi Baylina and Jacques Dafflon\\n *\\n * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to\\n * this software to the public domain worldwide. This software is distributed without any warranty.\\n *\\n * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see\\n * <http://creativecommons.org/publicdomain/zero/1.0/>.\\n */\\npragma solidity >0.5.0 <0.8.0;\\n\\n/// @dev The interface a contract MUST implement if it is the implementer of\\n/// some (other) interface for any address other than itself.\\ninterface ERC1820ImplementerInterface {\\n    /// @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\\n    /// @param interfaceHash keccak256 hash of the name of the interface\\n    /// @param addr Address for which the contract will implement the interface\\n    /// @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\\n}\\n\\n/**\\n * @title ERC1820 Pseudo-introspection Registry Contract\\n * @author Jordi Baylina and Jacques Dafflon\\n * @dev This contract is the official implementation of the ERC1820 Registry\\n * For more details, see https://eips.ethereum.org/EIPS/eip-1820\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\ncontract ERC1820Registry {\\n    bytes4 constant internal INVALID_ID = 0xffffffff;\\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\\n    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    mapping(address => mapping(bytes32 => address)) internal interfaces;\\n    mapping(address => address) internal managers;\\n    mapping(address => mapping(bytes4 => bool)) internal erc165Cached;\\n\\n    /// @notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\\n    /// @notice Indicates 'newManager' is the address of the new manager for 'addr'.\\n    event ManagerChanged(address indexed addr, address indexed newManager);\\n\\n    /// @notice Query if an address implements an interface and through which contract.\\n    /// @param _addr Address being queried for the implementer of an interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\\n    /// or '0' if '_addr' did not register an implementer for this interface.\\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address) {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        if (isERC165Interface(_interfaceHash)) {\\n            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\\n            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : address(0);\\n        }\\n        return interfaces[addr][_interfaceHash];\\n    }\\n\\n    /// @notice Sets the contract which implements a specific interface for an address.\\n    /// Only the manager defined for that address can set it.\\n    /// (Each address is the manager for itself until it sets a new manager.)\\n    /// @param _addr Address for which to set the interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @param _implementer Contract address implementing '_interfaceHash' for '_addr'.\\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        require(getManager(addr) == msg.sender, \\\"Not the manager\\\");\\n\\n        require(!isERC165Interface(_interfaceHash), \\\"Must not be an ERC165 hash\\\");\\n        if (_implementer != address(0) && _implementer != msg.sender) {\\n            require(\\n                ERC1820ImplementerInterface(_implementer)\\n                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC1820_ACCEPT_MAGIC,\\n                \\\"Does not implement the interface\\\"\\n            );\\n        }\\n        interfaces[addr][_interfaceHash] = _implementer;\\n        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\\n    }\\n\\n    /// @notice Sets '_newManager' as manager for '_addr'.\\n    /// The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\\n    /// @param _addr Address for which to set the new manager.\\n    /// @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\\n    function setManager(address _addr, address _newManager) external {\\n        require(getManager(_addr) == msg.sender, \\\"Not the manager\\\");\\n        managers[_addr] = _newManager == _addr ? address(0) : _newManager;\\n        emit ManagerChanged(_addr, _newManager);\\n    }\\n\\n    /// @notice Get the manager of an address.\\n    /// @param _addr Address for which to return the manager.\\n    /// @return Address of the manager for a given address.\\n    function getManager(address _addr) public view returns(address) {\\n        // By default the manager of an address is the same address\\n        if (managers[_addr] == address(0)) {\\n            return _addr;\\n        } else {\\n            return managers[_addr];\\n        }\\n    }\\n\\n    /// @notice Compute the keccak256 hash of an interface given its name.\\n    /// @param _interfaceName Name of the interface.\\n    /// @return The keccak256 hash of an interface name.\\n    function interfaceHash(string calldata _interfaceName) external pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_interfaceName));\\n    }\\n\\n    /* --- ERC165 Related Functions --- */\\n    /* --- Developed in collaboration with William Entriken. --- */\\n\\n    /// @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n    /// @param _contract Address of the contract for which to update the cache.\\n    /// @param _interfaceId ERC165 interface for which to update the cache.\\n    function updateERC165Cache(address _contract, bytes4 _interfaceId) external {\\n        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(\\n            _contract, _interfaceId) ? _contract : address(0);\\n        erc165Cached[_contract][_interfaceId] = true;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not.\\n    //  If the result is not cached a direct lookup on the contract address is performed.\\n    //  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n    //  'updateERC165Cache' with the contract address.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        if (!erc165Cached[_contract][_interfaceId]) {\\n            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\\n        }\\n        return interfaces[_contract][_interfaceId] == _contract;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if (success == 0 || result == 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, INVALID_ID);\\n        if (success == 0 || result != 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if (success == 1 && result == 1) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\\n    /// @param _interfaceHash The hash to check.\\n    /// @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise.\\n    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\\n        return _interfaceHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\\n    }\\n\\n    /// @dev Make a call on a contract without throwing if the function does not exist.\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal view returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40)               // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID)                // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000,                         // 30k gas\\n                _contract,                     // To addr\\n                x,                             // Inputs are stored at location x\\n                0x24,                          // Inputs are 36 (4 + 32) bytes long\\n                x,                             // Store output over input (saves space)\\n                0x20                           // Outputs are 32 bytes long\\n            )\\n\\n            result := mload(x)                 // Load the result\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb589c8974571737e07516c285ee7a66acf98c11b0d42f029c8989f132d21be58\",\"license\":\"CC0-1.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "canImplementInterfaceForAddress(bytes32,address)": {
                "notice": "Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not."
              }
            },
            "version": 1
          }
        },
        "ERC1820Registry": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "interfaceHash",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                }
              ],
              "name": "InterfaceImplementerSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newManager",
                  "type": "address"
                }
              ],
              "name": "ManagerChanged",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "_interfaceHash",
                  "type": "bytes32"
                }
              ],
              "name": "getInterfaceImplementer",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_addr",
                  "type": "address"
                }
              ],
              "name": "getManager",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_contract",
                  "type": "address"
                },
                {
                  "internalType": "bytes4",
                  "name": "_interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "implementsERC165Interface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_contract",
                  "type": "address"
                },
                {
                  "internalType": "bytes4",
                  "name": "_interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "implementsERC165InterfaceNoCache",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_interfaceName",
                  "type": "string"
                }
              ],
              "name": "interfaceHash",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "_interfaceHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "_implementer",
                  "type": "address"
                }
              ],
              "name": "setInterfaceImplementer",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_newManager",
                  "type": "address"
                }
              ],
              "name": "setManager",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_contract",
                  "type": "address"
                },
                {
                  "internalType": "bytes4",
                  "name": "_interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "updateERC165Cache",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Jordi Baylina and Jacques Dafflon",
            "details": "This contract is the official implementation of the ERC1820 Registry For more details, see https://eips.ethereum.org/EIPS/eip-1820 Compiler used: optimistic-solc Runtime target: OVM",
            "kind": "dev",
            "methods": {
              "getInterfaceImplementer(address,bytes32)": {
                "params": {
                  "_addr": "Address being queried for the implementer of an interface. (If '_addr' is the zero address then 'msg.sender' is assumed.)",
                  "_interfaceHash": "Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface."
                },
                "returns": {
                  "_0": "The address of the contract which implements the interface '_interfaceHash' for '_addr' or '0' if '_addr' did not register an implementer for this interface."
                }
              },
              "getManager(address)": {
                "params": {
                  "_addr": "Address for which to return the manager."
                },
                "returns": {
                  "_0": "Address of the manager for a given address."
                }
              },
              "implementsERC165Interface(address,bytes4)": {
                "params": {
                  "_contract": "Address of the contract to check.",
                  "_interfaceId": "ERC165 interface to check."
                },
                "returns": {
                  "_0": "True if '_contract' implements '_interfaceId', false otherwise."
                }
              },
              "implementsERC165InterfaceNoCache(address,bytes4)": {
                "params": {
                  "_contract": "Address of the contract to check.",
                  "_interfaceId": "ERC165 interface to check."
                },
                "returns": {
                  "_0": "True if '_contract' implements '_interfaceId', false otherwise."
                }
              },
              "interfaceHash(string)": {
                "params": {
                  "_interfaceName": "Name of the interface."
                },
                "returns": {
                  "_0": "The keccak256 hash of an interface name."
                }
              },
              "setInterfaceImplementer(address,bytes32,address)": {
                "params": {
                  "_addr": "Address for which to set the interface. (If '_addr' is the zero address then 'msg.sender' is assumed.)",
                  "_implementer": "Contract address implementing '_interfaceHash' for '_addr'.",
                  "_interfaceHash": "Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface."
                }
              },
              "setManager(address,address)": {
                "params": {
                  "_addr": "Address for which to set the new manager.",
                  "_newManager": "Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)"
                }
              },
              "updateERC165Cache(address,bytes4)": {
                "params": {
                  "_contract": "Address of the contract for which to update the cache.",
                  "_interfaceId": "ERC165 interface for which to update the cache."
                }
              }
            },
            "title": "ERC1820 Pseudo-introspection Registry Contract",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506108c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a41e7d511161005b578063a41e7d51146101b7578063aabbb8ca146101ed578063b705676514610219578063f712f3e81461026357610088565b806329965a1d1461008d5780633d584063146100c55780635df8122f1461010757806365ba36c114610135575b600080fd5b6100c3600480360360608110156100a357600080fd5b506001600160a01b03813581169160208101359160409091013516610299565b005b6100eb600480360360208110156100db57600080fd5b50356001600160a01b0316610501565b604080516001600160a01b039092168252519081900360200190f35b6100c36004803603604081101561011d57600080fd5b506001600160a01b038135811691602001351661054b565b6101a56004803603602081101561014b57600080fd5b81019060208101813564010000000081111561016657600080fd5b82018360208201111561017857600080fd5b8035906020019184600183028401116401000000008311171561019a57600080fd5b509092509050610624565b60408051918252519081900360200190f35b6100c3600480360360408110156101cd57600080fd5b5080356001600160a01b031690602001356001600160e01b03191661065f565b6100eb6004803603604081101561020357600080fd5b506001600160a01b0381351690602001356106dc565b61024f6004803603604081101561022f57600080fd5b5080356001600160a01b031690602001356001600160e01b031916610753565b604080519115158252519081900360200190f35b61024f6004803603604081101561027957600080fd5b5080356001600160a01b031690602001356001600160e01b0319166107f5565b60006001600160a01b038416156102b057836102b2565b335b9050336102be82610501565b6001600160a01b03161461030b576040805162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329036b0b730b3b2b960891b604482015290519081900360640190fd5b61031483610873565b15610366576040805162461bcd60e51b815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b6001600160a01b0382161580159061038757506001600160a01b0382163314155b1561049d57604051602001808073455243313832305f4143434550545f4d4147494360601b815250601401905060405160208183030381529060405280519060200120826001600160a01b031663249cb3fa85846040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b50511461049d576040805162461bcd60e51b815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b6001600160a01b0381811660008181526020818152604080832088845290915280822080546001600160a01b0319169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b6001600160a01b03818116600090815260016020526040812054909116610529575080610546565b506001600160a01b03808216600090815260016020526040902054165b919050565b3361055583610501565b6001600160a01b0316146105a2576040805162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329036b0b730b3b2b960891b604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b0316146105c157806105c4565b60005b6001600160a01b0383811660008181526001602052604080822080546001600160a01b0319169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106698282610753565b610674576000610676565b815b6001600160a01b039283166000818152602081815260408083206001600160e01b03199690961680845295825280832080546001600160a01b0319169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b6000806001600160a01b038416156106f457836106f6565b335b905061070183610873565b15610727578261071182826107f5565b61071c57600061071e565b815b92505050610659565b6001600160a01b0390811660009081526020818152604080832086845290915290205416905092915050565b60008080610768856301ffc9a760e01b610880565b9092509050811580610778575080155b1561078857600092505050610659565b61079a856001600160e01b0319610880565b90925090508115806107ab57508015155b156107bb57600092505050610659565b6107c58585610880565b90925090506001821480156107da5750806001145b156107ea57600192505050610659565b506000949350505050565b6001600160a01b03821660009081526002602090815260408083206001600160e01b03198516845290915281205460ff1661083b576108348383610753565b9050610659565b506001600160a01b038083166000818152602081815260408083206001600160e01b0319871684529091529020549091161492915050565b6001600160e01b03161590565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea164736f6c6343000706000a",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA41E7D51 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA41E7D51 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xAABBB8CA EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xB7056765 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xF712F3E8 EQ PUSH2 0x263 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x29965A1D EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x3D584063 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x5DF8122F EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x65BA36C1 EQ PUSH2 0x135 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x501 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x54B JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x65F JUMP JUMPDEST PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x6DC JUMP JUMPDEST PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x2B0 JUMPI DUP4 PUSH2 0x2B2 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP CALLER PUSH2 0x2BE DUP3 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2737BA103A34329036B0B730B3B2B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x314 DUP4 PUSH2 0x873 JUMP JUMPDEST ISZERO PUSH2 0x366 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206E6F7420626520616E204552433136352068617368000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x387 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH20 0x455243313832305F4143434550545F4D41474943 PUSH1 0x60 SHL DUP2 MSTORE POP PUSH1 0x14 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x249CB3FA DUP6 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD EQ PUSH2 0x49D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446F6573206E6F7420696D706C656D656E742074686520696E74657266616365 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP5 DUP8 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD DUP7 SWAP3 SWAP2 PUSH32 0x93BAA6EFBD2244243BFEE6CE4CFDD1D04FC4C0E9A786ABD3A41313BD352DB153 SWAP2 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x529 JUMPI POP DUP1 PUSH2 0x546 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x555 DUP4 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2737BA103A34329036B0B730B3B2B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5C1 JUMPI DUP1 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 DUP6 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE SWAP3 MLOAD SWAP2 DUP5 AND SWAP3 SWAP1 SWAP2 PUSH32 0x605C2DBF762E5F7D60A546D42E7205DCB1B011EBC62A61736A57C9089D3A4350 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x669 DUP3 DUP3 PUSH2 0x753 JUMP JUMPDEST PUSH2 0x674 JUMPI PUSH1 0x0 PUSH2 0x676 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP7 SWAP1 SWAP7 AND DUP1 DUP5 MSTORE SWAP6 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 SWAP1 SWAP8 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP6 SSTORE SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE DUP2 DUP2 KECCAK256 SWAP3 DUP2 MSTORE SWAP2 SWAP1 SWAP3 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x6F4 JUMPI DUP4 PUSH2 0x6F6 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP PUSH2 0x701 DUP4 PUSH2 0x873 JUMP JUMPDEST ISZERO PUSH2 0x727 JUMPI DUP3 PUSH2 0x711 DUP3 DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x71C JUMPI PUSH1 0x0 PUSH2 0x71E JUMP JUMPDEST DUP2 JUMPDEST SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x768 DUP6 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x778 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x788 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH2 0x79A DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x7AB JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH2 0x7C5 DUP6 DUP6 PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 DUP3 EQ DUP1 ISZERO PUSH2 0x7DA JUMPI POP DUP1 PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x7EA JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x83B JUMPI PUSH2 0x834 DUP4 DUP4 PUSH2 0x753 JUMP JUMPDEST SWAP1 POP PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP10 PUSH2 0x7530 STATICCALL SWAP1 MLOAD SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD MOD STOP EXP ",
              "sourceMap": "1776:8732:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063a41e7d511161005b578063a41e7d51146101b7578063aabbb8ca146101ed578063b705676514610219578063f712f3e81461026357610088565b806329965a1d1461008d5780633d584063146100c55780635df8122f1461010757806365ba36c114610135575b600080fd5b6100c3600480360360608110156100a357600080fd5b506001600160a01b03813581169160208101359160409091013516610299565b005b6100eb600480360360208110156100db57600080fd5b50356001600160a01b0316610501565b604080516001600160a01b039092168252519081900360200190f35b6100c36004803603604081101561011d57600080fd5b506001600160a01b038135811691602001351661054b565b6101a56004803603602081101561014b57600080fd5b81019060208101813564010000000081111561016657600080fd5b82018360208201111561017857600080fd5b8035906020019184600183028401116401000000008311171561019a57600080fd5b509092509050610624565b60408051918252519081900360200190f35b6100c3600480360360408110156101cd57600080fd5b5080356001600160a01b031690602001356001600160e01b03191661065f565b6100eb6004803603604081101561020357600080fd5b506001600160a01b0381351690602001356106dc565b61024f6004803603604081101561022f57600080fd5b5080356001600160a01b031690602001356001600160e01b031916610753565b604080519115158252519081900360200190f35b61024f6004803603604081101561027957600080fd5b5080356001600160a01b031690602001356001600160e01b0319166107f5565b60006001600160a01b038416156102b057836102b2565b335b9050336102be82610501565b6001600160a01b03161461030b576040805162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329036b0b730b3b2b960891b604482015290519081900360640190fd5b61031483610873565b15610366576040805162461bcd60e51b815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b6001600160a01b0382161580159061038757506001600160a01b0382163314155b1561049d57604051602001808073455243313832305f4143434550545f4d4147494360601b815250601401905060405160208183030381529060405280519060200120826001600160a01b031663249cb3fa85846040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b50511461049d576040805162461bcd60e51b815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b6001600160a01b0381811660008181526020818152604080832088845290915280822080546001600160a01b0319169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b6001600160a01b03818116600090815260016020526040812054909116610529575080610546565b506001600160a01b03808216600090815260016020526040902054165b919050565b3361055583610501565b6001600160a01b0316146105a2576040805162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329036b0b730b3b2b960891b604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b0316146105c157806105c4565b60005b6001600160a01b0383811660008181526001602052604080822080546001600160a01b0319169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106698282610753565b610674576000610676565b815b6001600160a01b039283166000818152602081815260408083206001600160e01b03199690961680845295825280832080546001600160a01b0319169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b6000806001600160a01b038416156106f457836106f6565b335b905061070183610873565b15610727578261071182826107f5565b61071c57600061071e565b815b92505050610659565b6001600160a01b0390811660009081526020818152604080832086845290915290205416905092915050565b60008080610768856301ffc9a760e01b610880565b9092509050811580610778575080155b1561078857600092505050610659565b61079a856001600160e01b0319610880565b90925090508115806107ab57508015155b156107bb57600092505050610659565b6107c58585610880565b90925090506001821480156107da5750806001145b156107ea57600192505050610659565b506000949350505050565b6001600160a01b03821660009081526002602090815260408083206001600160e01b03198516845290915281205460ff1661083b576108348383610753565b9050610659565b506001600160a01b038083166000818152602081815260408083206001600160e01b0319871684529091529020549091161492915050565b6001600160e01b03161590565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea164736f6c6343000706000a",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA41E7D51 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA41E7D51 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xAABBB8CA EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xB7056765 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xF712F3E8 EQ PUSH2 0x263 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x29965A1D EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x3D584063 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x5DF8122F EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x65BA36C1 EQ PUSH2 0x135 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x501 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x54B JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x65F JUMP JUMPDEST PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x6DC JUMP JUMPDEST PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x2B0 JUMPI DUP4 PUSH2 0x2B2 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP CALLER PUSH2 0x2BE DUP3 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2737BA103A34329036B0B730B3B2B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x314 DUP4 PUSH2 0x873 JUMP JUMPDEST ISZERO PUSH2 0x366 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206E6F7420626520616E204552433136352068617368000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x387 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH20 0x455243313832305F4143434550545F4D41474943 PUSH1 0x60 SHL DUP2 MSTORE POP PUSH1 0x14 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x249CB3FA DUP6 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD EQ PUSH2 0x49D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446F6573206E6F7420696D706C656D656E742074686520696E74657266616365 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP5 DUP8 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD DUP7 SWAP3 SWAP2 PUSH32 0x93BAA6EFBD2244243BFEE6CE4CFDD1D04FC4C0E9A786ABD3A41313BD352DB153 SWAP2 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x529 JUMPI POP DUP1 PUSH2 0x546 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH2 0x555 DUP4 PUSH2 0x501 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2737BA103A34329036B0B730B3B2B9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5C1 JUMPI DUP1 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 DUP6 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE SWAP3 MLOAD SWAP2 DUP5 AND SWAP3 SWAP1 SWAP2 PUSH32 0x605C2DBF762E5F7D60A546D42E7205DCB1B011EBC62A61736A57C9089D3A4350 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x669 DUP3 DUP3 PUSH2 0x753 JUMP JUMPDEST PUSH2 0x674 JUMPI PUSH1 0x0 PUSH2 0x676 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP7 SWAP1 SWAP7 AND DUP1 DUP5 MSTORE SWAP6 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 SWAP1 SWAP8 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP6 SSTORE SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE DUP2 DUP2 KECCAK256 SWAP3 DUP2 MSTORE SWAP2 SWAP1 SWAP3 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x6F4 JUMPI DUP4 PUSH2 0x6F6 JUMP JUMPDEST CALLER JUMPDEST SWAP1 POP PUSH2 0x701 DUP4 PUSH2 0x873 JUMP JUMPDEST ISZERO PUSH2 0x727 JUMPI DUP3 PUSH2 0x711 DUP3 DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x71C JUMPI PUSH1 0x0 PUSH2 0x71E JUMP JUMPDEST DUP2 JUMPDEST SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x768 DUP6 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x778 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x788 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH2 0x79A DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x7AB JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST PUSH2 0x7C5 DUP6 DUP6 PUSH2 0x880 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 DUP3 EQ DUP1 ISZERO PUSH2 0x7DA JUMPI POP DUP1 PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x7EA JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x83B JUMPI PUSH2 0x834 DUP4 DUP4 PUSH2 0x753 JUMP JUMPDEST SWAP1 POP PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP10 PUSH2 0x7530 STATICCALL SWAP1 MLOAD SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP SMOD MOD STOP EXP ",
              "sourceMap": "1776:8732:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4285:785;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4285:785:0;;;;;;;;;;;;;;;;;:::i;:::-;;5834:273;;;;;;;;;;;;;;;;-1:-1:-1;5834:273:0;-1:-1:-1;;;;;5834:273:0;;:::i;:::-;;;;-1:-1:-1;;;;;5834:273:0;;;;;;;;;;;;;;5394:265;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5394:265:0;;;;;;;;;;:::i;6298:153::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6298:153:0;;-1:-1:-1;6298:153:0;-1:-1:-1;6298:153:0;:::i;:::-;;;;;;;;;;;;;;;;6824:280;;;;;;;;;;;;;;;;-1:-1:-1;6824:280:0;;-1:-1:-1;;;;;6824:280:0;;;;;-1:-1:-1;;;;;;6824:280:0;;:::i;3197:442::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3197:442:0;;;;;;;;:::i;8282:618::-;;;;;;;;;;;;;;;;-1:-1:-1;8282:618:0;;-1:-1:-1;;;;;8282:618:0;;;;;-1:-1:-1;;;;;;8282:618:0;;:::i;:::-;;;;;;;;;;;;;;;;;;7648:316;;;;;;;;;;;;;;;;-1:-1:-1;7648:316:0;;-1:-1:-1;;;;;7648:316:0;;;;;-1:-1:-1;;;;;;7648:316:0;;:::i;4285:785::-;4398:12;-1:-1:-1;;;;;4413:19:0;;;:40;;4448:5;4413:40;;;4435:10;4413:40;4398:55;-1:-1:-1;4491:10:0;4471:16;4398:55;4471:10;:16::i;:::-;-1:-1:-1;;;;;4471:30:0;;4463:58;;;;;-1:-1:-1;;;4463:58:0;;;;;;;;;;;;-1:-1:-1;;;4463:58:0;;;;;;;;;;;;;;;4541:33;4559:14;4541:17;:33::i;:::-;4540:34;4532:73;;;;;-1:-1:-1;;;4532:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4619:26:0;;;;;;:56;;-1:-1:-1;;;;;;4649:26:0;;4665:10;4649:26;;4619:56;4615:318;;;1972:40;;;;;;-1:-1:-1;;;1972:40:0;;;;;;;;;;;;;;;;;;;1962:51;;;;;;4744:12;-1:-1:-1;;;;;4716:94:0;;4811:14;4827:4;4716:116;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4716:116:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4716:116:0;:140;4691:231;;;;;-1:-1:-1;;;4691:231:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4942:16:0;;;:10;:16;;;;;;;;;;;:32;;;;;;;;;:47;;-1:-1:-1;;;;;;4942:47:0;;;;;;;;;5004:59;4942:32;;:16;5004:59;;;4285:785;;;;:::o;5834:273::-;-1:-1:-1;;;;;5980:15:0;;;5889:7;5980:15;;;:8;:15;;;;;;5889:7;;5980:15;5976:125;;-1:-1:-1;6032:5:0;6025:12;;5976:125;-1:-1:-1;;;;;;6075:15:0;;;;;;;:8;:15;;;;;;;5976:125;5834:273;;;:::o;5394:265::-;5498:10;5477:17;5488:5;5477:10;:17::i;:::-;-1:-1:-1;;;;;5477:31:0;;5469:59;;;;;-1:-1:-1;;;5469:59:0;;;;;;;;;;;;-1:-1:-1;;;5469:59:0;;;;;;;;;;;;;;;5571:5;-1:-1:-1;;;;;5556:20:0;:11;-1:-1:-1;;;;;5556:20:0;;:47;;5592:11;5556:47;;;5587:1;5556:47;-1:-1:-1;;;;;5538:15:0;;;;;;;:8;:15;;;;;;:65;;-1:-1:-1;;;;;;5538:65:0;;;;;;;;;;;5618:34;;;;;;5538:15;;5618:34;;5538:15;5618:34;5394:265;;:::o;6298:153::-;6375:7;6428:14;;6411:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6401:43;;;;;;6394:50;;6298:153;;;;;:::o;6824:280::-;6948:70;6994:9;7005:12;6948:32;:70::i;:::-;:95;;7041:1;6948:95;;;7021:9;6948:95;-1:-1:-1;;;;;6910:21:0;;;:10;:21;;;;;;;;;;;-1:-1:-1;;;;;;6910:35:0;;;;;;;;;;;;;:133;;-1:-1:-1;;;;;;6910:133:0;;;;;;;;;;;;7053:23;;;:12;:23;;;;;:37;;;;;;;;:44;;-1:-1:-1;;7053:44:0;-1:-1:-1;7053:44:0;;;6824:280::o;3197:442::-;3292:7;;-1:-1:-1;;;;;3326:19:0;;;:40;;3361:5;3326:40;;;3348:10;3326:40;3311:55;;3380:33;3398:14;3380:17;:33::i;:::-;3376:208;;;3465:14;3501:52;3527:4;3465:14;3501:25;:52::i;:::-;:72;;3571:1;3501:72;;;3556:4;3501:72;3494:79;;;;;;3376:208;-1:-1:-1;;;;;3600:16:0;;;:10;:16;;;;;;;;;;;:32;;;;;;;;;;;-1:-1:-1;3197:442:0;;;;:::o;8282:618::-;8385:4;;;8471:32;8483:9;-1:-1:-1;;;8471:11:0;:32::i;:::-;8451:52;;-1:-1:-1;8451:52:0;-1:-1:-1;8517:12:0;;;:27;;-1:-1:-1;8533:11:0;;8517:27;8513:70;;;8567:5;8560:12;;;;;;8513:70;8613:34;8625:9;-1:-1:-1;;;;;;8613:11:0;:34::i;:::-;8593:54;;-1:-1:-1;8593:54:0;-1:-1:-1;8661:12:0;;;:27;;-1:-1:-1;8677:11:0;;;8661:27;8657:70;;;8711:5;8704:12;;;;;;8657:70;8757:36;8769:9;8780:12;8757:11;:36::i;:::-;8737:56;;-1:-1:-1;8737:56:0;-1:-1:-1;8818:1:0;8807:12;;:27;;;;;8823:6;8833:1;8823:11;8807:27;8803:69;;;8857:4;8850:11;;;;;;8803:69;-1:-1:-1;8888:5:0;;8282:618;-1:-1:-1;;;;8282:618:0:o;7648:316::-;-1:-1:-1;;;;;7765:23:0;;7744:4;7765:23;;;:12;:23;;;;;;;;-1:-1:-1;;;;;;7765:37:0;;;;;;;;;;;;7760:133;;7825:57;7858:9;7869:12;7825:32;:57::i;:::-;7818:64;;;;7760:133;-1:-1:-1;;;;;;7909:48:0;;;:10;:21;;;;;;;;;;;-1:-1:-1;;;;;;7909:35:0;;;;;;;;;;;;;:48;7648:316;;;;:::o;9155:192::-;-1:-1:-1;;;;;9252:83:0;:88;;9155:192::o;9441:1065::-;9655:4;9649:11;-1:-1:-1;;;9746:19:0;;;9856:4;9849:12;;9842:34;;;9533:15;;;;9598:8;10350:4;9649:11;10178:4;9649:11;10038:9;9980:5;9952:471;10447:8;;9941:482;;10447:8;;-1:-1:-1;9626:874:0;-1:-1:-1;;;;9626:874:0:o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "448200",
                "executionCost": "486",
                "totalCost": "448686"
              },
              "external": {
                "getInterfaceImplementer(address,bytes32)": "infinite",
                "getManager(address)": "2119",
                "implementsERC165Interface(address,bytes4)": "infinite",
                "implementsERC165InterfaceNoCache(address,bytes4)": "infinite",
                "interfaceHash(string)": "infinite",
                "setInterfaceImplementer(address,bytes32,address)": "infinite",
                "setManager(address,address)": "24714",
                "updateERC165Cache(address,bytes4)": "infinite"
              },
              "internal": {
                "isERC165Interface(bytes32)": "33",
                "noThrowCall(address,bytes4)": "infinite"
              }
            },
            "methodIdentifiers": {
              "getInterfaceImplementer(address,bytes32)": "aabbb8ca",
              "getManager(address)": "3d584063",
              "implementsERC165Interface(address,bytes4)": "f712f3e8",
              "implementsERC165InterfaceNoCache(address,bytes4)": "b7056765",
              "interfaceHash(string)": "65ba36c1",
              "setInterfaceImplementer(address,bytes32,address)": "29965a1d",
              "setManager(address,address)": "5df8122f",
              "updateERC165Cache(address,bytes4)": "a41e7d51"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceImplementerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_interfaceHash\",\"type\":\"bytes32\"}],\"name\":\"getInterfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165Interface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165InterfaceNoCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_interfaceName\",\"type\":\"string\"}],\"name\":\"interfaceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_implementer\",\"type\":\"address\"}],\"name\":\"setInterfaceImplementer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"updateERC165Cache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jordi Baylina and Jacques Dafflon\",\"details\":\"This contract is the official implementation of the ERC1820 Registry For more details, see https://eips.ethereum.org/EIPS/eip-1820 Compiler used: optimistic-solc Runtime target: OVM\",\"kind\":\"dev\",\"methods\":{\"getInterfaceImplementer(address,bytes32)\":{\"params\":{\"_addr\":\"Address being queried for the implementer of an interface. (If '_addr' is the zero address then 'msg.sender' is assumed.)\",\"_interfaceHash\":\"Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\"},\"returns\":{\"_0\":\"The address of the contract which implements the interface '_interfaceHash' for '_addr' or '0' if '_addr' did not register an implementer for this interface.\"}},\"getManager(address)\":{\"params\":{\"_addr\":\"Address for which to return the manager.\"},\"returns\":{\"_0\":\"Address of the manager for a given address.\"}},\"implementsERC165Interface(address,bytes4)\":{\"params\":{\"_contract\":\"Address of the contract to check.\",\"_interfaceId\":\"ERC165 interface to check.\"},\"returns\":{\"_0\":\"True if '_contract' implements '_interfaceId', false otherwise.\"}},\"implementsERC165InterfaceNoCache(address,bytes4)\":{\"params\":{\"_contract\":\"Address of the contract to check.\",\"_interfaceId\":\"ERC165 interface to check.\"},\"returns\":{\"_0\":\"True if '_contract' implements '_interfaceId', false otherwise.\"}},\"interfaceHash(string)\":{\"params\":{\"_interfaceName\":\"Name of the interface.\"},\"returns\":{\"_0\":\"The keccak256 hash of an interface name.\"}},\"setInterfaceImplementer(address,bytes32,address)\":{\"params\":{\"_addr\":\"Address for which to set the interface. (If '_addr' is the zero address then 'msg.sender' is assumed.)\",\"_implementer\":\"Contract address implementing '_interfaceHash' for '_addr'.\",\"_interfaceHash\":\"Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\"}},\"setManager(address,address)\":{\"params\":{\"_addr\":\"Address for which to set the new manager.\",\"_newManager\":\"Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\"}},\"updateERC165Cache(address,bytes4)\":{\"params\":{\"_contract\":\"Address of the contract for which to update the cache.\",\"_interfaceId\":\"ERC165 interface for which to update the cache.\"}}},\"title\":\"ERC1820 Pseudo-introspection Registry Contract\",\"version\":1},\"userdoc\":{\"events\":{\"InterfaceImplementerSet(address,bytes32,address)\":{\"notice\":\"Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\"},\"ManagerChanged(address,address)\":{\"notice\":\"Indicates 'newManager' is the address of the new manager for 'addr'.\"}},\"kind\":\"user\",\"methods\":{\"getInterfaceImplementer(address,bytes32)\":{\"notice\":\"Query if an address implements an interface and through which contract.\"},\"getManager(address)\":{\"notice\":\"Get the manager of an address.\"},\"implementsERC165InterfaceNoCache(address,bytes4)\":{\"notice\":\"Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\"},\"interfaceHash(string)\":{\"notice\":\"Compute the keccak256 hash of an interface given its name.\"},\"setInterfaceImplementer(address,bytes32,address)\":{\"notice\":\"Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)\"},\"setManager(address,address)\":{\"notice\":\"Sets '_newManager' as manager for '_addr'. The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\"},\"updateERC165Cache(address,bytes4)\":{\"notice\":\"Updates the cache with whether the contract implements an ERC165 interface or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol\":\"ERC1820Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n/* ERC1820 Pseudo-introspection Registry Contract\\n * This standard defines a universal registry smart contract where any address (contract or regular account) can\\n * register which interface it supports and which smart contract is responsible for its implementation.\\n *\\n * Written in 2019 by Jordi Baylina and Jacques Dafflon\\n *\\n * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to\\n * this software to the public domain worldwide. This software is distributed without any warranty.\\n *\\n * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see\\n * <http://creativecommons.org/publicdomain/zero/1.0/>.\\n */\\npragma solidity >0.5.0 <0.8.0;\\n\\n/// @dev The interface a contract MUST implement if it is the implementer of\\n/// some (other) interface for any address other than itself.\\ninterface ERC1820ImplementerInterface {\\n    /// @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\\n    /// @param interfaceHash keccak256 hash of the name of the interface\\n    /// @param addr Address for which the contract will implement the interface\\n    /// @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\\n}\\n\\n/**\\n * @title ERC1820 Pseudo-introspection Registry Contract\\n * @author Jordi Baylina and Jacques Dafflon\\n * @dev This contract is the official implementation of the ERC1820 Registry\\n * For more details, see https://eips.ethereum.org/EIPS/eip-1820\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\ncontract ERC1820Registry {\\n    bytes4 constant internal INVALID_ID = 0xffffffff;\\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\\n    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    mapping(address => mapping(bytes32 => address)) internal interfaces;\\n    mapping(address => address) internal managers;\\n    mapping(address => mapping(bytes4 => bool)) internal erc165Cached;\\n\\n    /// @notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\\n    /// @notice Indicates 'newManager' is the address of the new manager for 'addr'.\\n    event ManagerChanged(address indexed addr, address indexed newManager);\\n\\n    /// @notice Query if an address implements an interface and through which contract.\\n    /// @param _addr Address being queried for the implementer of an interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\\n    /// or '0' if '_addr' did not register an implementer for this interface.\\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address) {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        if (isERC165Interface(_interfaceHash)) {\\n            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\\n            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : address(0);\\n        }\\n        return interfaces[addr][_interfaceHash];\\n    }\\n\\n    /// @notice Sets the contract which implements a specific interface for an address.\\n    /// Only the manager defined for that address can set it.\\n    /// (Each address is the manager for itself until it sets a new manager.)\\n    /// @param _addr Address for which to set the interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @param _implementer Contract address implementing '_interfaceHash' for '_addr'.\\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        require(getManager(addr) == msg.sender, \\\"Not the manager\\\");\\n\\n        require(!isERC165Interface(_interfaceHash), \\\"Must not be an ERC165 hash\\\");\\n        if (_implementer != address(0) && _implementer != msg.sender) {\\n            require(\\n                ERC1820ImplementerInterface(_implementer)\\n                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC1820_ACCEPT_MAGIC,\\n                \\\"Does not implement the interface\\\"\\n            );\\n        }\\n        interfaces[addr][_interfaceHash] = _implementer;\\n        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\\n    }\\n\\n    /// @notice Sets '_newManager' as manager for '_addr'.\\n    /// The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\\n    /// @param _addr Address for which to set the new manager.\\n    /// @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\\n    function setManager(address _addr, address _newManager) external {\\n        require(getManager(_addr) == msg.sender, \\\"Not the manager\\\");\\n        managers[_addr] = _newManager == _addr ? address(0) : _newManager;\\n        emit ManagerChanged(_addr, _newManager);\\n    }\\n\\n    /// @notice Get the manager of an address.\\n    /// @param _addr Address for which to return the manager.\\n    /// @return Address of the manager for a given address.\\n    function getManager(address _addr) public view returns(address) {\\n        // By default the manager of an address is the same address\\n        if (managers[_addr] == address(0)) {\\n            return _addr;\\n        } else {\\n            return managers[_addr];\\n        }\\n    }\\n\\n    /// @notice Compute the keccak256 hash of an interface given its name.\\n    /// @param _interfaceName Name of the interface.\\n    /// @return The keccak256 hash of an interface name.\\n    function interfaceHash(string calldata _interfaceName) external pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_interfaceName));\\n    }\\n\\n    /* --- ERC165 Related Functions --- */\\n    /* --- Developed in collaboration with William Entriken. --- */\\n\\n    /// @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n    /// @param _contract Address of the contract for which to update the cache.\\n    /// @param _interfaceId ERC165 interface for which to update the cache.\\n    function updateERC165Cache(address _contract, bytes4 _interfaceId) external {\\n        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(\\n            _contract, _interfaceId) ? _contract : address(0);\\n        erc165Cached[_contract][_interfaceId] = true;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not.\\n    //  If the result is not cached a direct lookup on the contract address is performed.\\n    //  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n    //  'updateERC165Cache' with the contract address.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        if (!erc165Cached[_contract][_interfaceId]) {\\n            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\\n        }\\n        return interfaces[_contract][_interfaceId] == _contract;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if (success == 0 || result == 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, INVALID_ID);\\n        if (success == 0 || result != 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if (success == 1 && result == 1) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\\n    /// @param _interfaceHash The hash to check.\\n    /// @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise.\\n    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\\n        return _interfaceHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\\n    }\\n\\n    /// @dev Make a call on a contract without throwing if the function does not exist.\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal view returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40)               // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID)                // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000,                         // 30k gas\\n                _contract,                     // To addr\\n                x,                             // Inputs are stored at location x\\n                0x24,                          // Inputs are 36 (4 + 32) bytes long\\n                x,                             // Store output over input (saves space)\\n                0x20                           // Outputs are 32 bytes long\\n            )\\n\\n            result := mload(x)                 // Load the result\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb589c8974571737e07516c285ee7a66acf98c11b0d42f029c8989f132d21be58\",\"license\":\"CC0-1.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 34,
                "contract": "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol:ERC1820Registry",
                "label": "interfaces",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_mapping(t_bytes32,t_address))"
              },
              {
                "astId": 38,
                "contract": "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol:ERC1820Registry",
                "label": "managers",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_address)"
              },
              {
                "astId": 44,
                "contract": "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol:ERC1820Registry",
                "label": "erc165Cached",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes4": {
                "encoding": "inplace",
                "label": "bytes4",
                "numberOfBytes": "4"
              },
              "t_mapping(t_address,t_address)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_address,t_mapping(t_bytes32,t_address))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(bytes32 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_address)"
              },
              "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(bytes4 => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_bool)"
              },
              "t_mapping(t_bytes32,t_address)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_bytes4,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              }
            }
          },
          "userdoc": {
            "events": {
              "InterfaceImplementerSet(address,bytes32,address)": {
                "notice": "Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'."
              },
              "ManagerChanged(address,address)": {
                "notice": "Indicates 'newManager' is the address of the new manager for 'addr'."
              }
            },
            "kind": "user",
            "methods": {
              "getInterfaceImplementer(address,bytes32)": {
                "notice": "Query if an address implements an interface and through which contract."
              },
              "getManager(address)": {
                "notice": "Get the manager of an address."
              },
              "implementsERC165InterfaceNoCache(address,bytes4)": {
                "notice": "Checks whether a contract implements an ERC165 interface or not without using nor updating the cache."
              },
              "interfaceHash(string)": {
                "notice": "Compute the keccak256 hash of an interface given its name."
              },
              "setInterfaceImplementer(address,bytes32,address)": {
                "notice": "Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)"
              },
              "setManager(address,address)": {
                "notice": "Sets '_newManager' as manager for '_addr'. The new manager will be able to call 'setInterfaceImplementer' for '_addr'."
              },
              "updateERC165Cache(address,bytes4)": {
                "notice": "Updates the cache with whether the contract implements an ERC165 interface or not."
              }
            },
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol": {
        "ast": {
          "absolutePath": "contracts/optimistic-ethereum/OVM/predeploys/ERC1820Registry.sol",
          "exportedSymbols": {
            "ERC1820ImplementerInterface": [
              13
            ],
            "ERC1820Registry": [
              454
            ]
          },
          "id": 455,
          "license": "CC0-1.0",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">",
                "0.5",
                ".0",
                "<",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "755:30:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "787:139:0",
                "text": "@dev The interface a contract MUST implement if it is the implementer of\n some (other) interface for any address other than itself."
              },
              "fullyImplemented": false,
              "id": 13,
              "linearizedBaseContracts": [
                13
              ],
              "name": "ERC1820ImplementerInterface",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "970:376:0",
                    "text": "@notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\n @param interfaceHash keccak256 hash of the name of the interface\n @param addr Address for which the contract will implement the interface\n @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'."
                  },
                  "functionSelector": "249cb3fa",
                  "id": 12,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canImplementInterfaceForAddress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 8,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "interfaceHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1392:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1392:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "mutability": "mutable",
                        "name": "addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1415:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1415:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1391:37:0"
                  },
                  "returnParameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 10,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1451:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 9,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1451:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1450:9:0"
                  },
                  "scope": 13,
                  "src": "1351:109:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 455,
              "src": "926:536:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 14,
                "nodeType": "StructuredDocumentation",
                "src": "1464:311:0",
                "text": " @title ERC1820 Pseudo-introspection Registry Contract\n @author Jordi Baylina and Jacques Dafflon\n @dev This contract is the official implementation of the ERC1820 Registry\n For more details, see https://eips.ethereum.org/EIPS/eip-1820\n Compiler used: optimistic-solc\n Runtime target: OVM"
              },
              "fullyImplemented": true,
              "id": 454,
              "linearizedBaseContracts": [
                454
              ],
              "name": "ERC1820Registry",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 17,
                  "mutability": "constant",
                  "name": "INVALID_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "1807:48:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 15,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1807:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30786666666666666666",
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1845:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4294967295_by_1",
                      "typeString": "int_const 4294967295"
                    },
                    "value": "0xffffffff"
                  },
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 20,
                  "mutability": "constant",
                  "name": "ERC165ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "1861:46:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1861:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783031666663396137",
                    "id": 19,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1897:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_33540519_by_1",
                      "typeString": "int_const 33540519"
                    },
                    "value": "0x01ffc9a7"
                  },
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 28,
                  "mutability": "constant",
                  "name": "ERC1820_ACCEPT_MAGIC",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "1913:100:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 21,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1913:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "455243313832305f4143434550545f4d41474943",
                            "id": 25,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1989:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_a2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4",
                              "typeString": "literal_string \"ERC1820_ACCEPT_MAGIC\""
                            },
                            "value": "ERC1820_ACCEPT_MAGIC"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_a2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4",
                              "typeString": "literal_string \"ERC1820_ACCEPT_MAGIC\""
                            }
                          ],
                          "expression": {
                            "id": 23,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1972:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "1972:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1972:40:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 22,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1962:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1962:51:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34,
                  "mutability": "mutable",
                  "name": "interfaces",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "2020:67:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                    "typeString": "mapping(address => mapping(bytes32 => address))"
                  },
                  "typeName": {
                    "id": 33,
                    "keyType": {
                      "id": 29,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2028:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2020:47:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                      "typeString": "mapping(address => mapping(bytes32 => address))"
                    },
                    "valueType": {
                      "id": 32,
                      "keyType": {
                        "id": 30,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2047:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2039:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      },
                      "valueType": {
                        "id": 31,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2058:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38,
                  "mutability": "mutable",
                  "name": "managers",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "2093:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                    "typeString": "mapping(address => address)"
                  },
                  "typeName": {
                    "id": 37,
                    "keyType": {
                      "id": 35,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2101:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2093:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                      "typeString": "mapping(address => address)"
                    },
                    "valueType": {
                      "id": 36,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2112:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "erc165Cached",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "2144:65:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes4_$_t_bool_$_$",
                    "typeString": "mapping(address => mapping(bytes4 => bool))"
                  },
                  "typeName": {
                    "id": 43,
                    "keyType": {
                      "id": 39,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2152:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2144:43:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes4_$_t_bool_$_$",
                      "typeString": "mapping(address => mapping(bytes4 => bool))"
                    },
                    "valueType": {
                      "id": 42,
                      "keyType": {
                        "id": 40,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "2171:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2163:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                        "typeString": "mapping(bytes4 => bool)"
                      },
                      "valueType": {
                        "id": 41,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2181:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 45,
                    "nodeType": "StructuredDocumentation",
                    "src": "2216:84:0",
                    "text": "@notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'."
                  },
                  "id": 53,
                  "name": "InterfaceImplementerSet",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 52,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 47,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 53,
                        "src": "2335:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 46,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2335:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 49,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "interfaceHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 53,
                        "src": "2357:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 48,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2357:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 51,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "implementer",
                        "nodeType": "VariableDeclaration",
                        "scope": 53,
                        "src": "2388:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 50,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2388:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2334:82:0"
                  },
                  "src": "2305:112:0"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 54,
                    "nodeType": "StructuredDocumentation",
                    "src": "2422:80:0",
                    "text": "@notice Indicates 'newManager' is the address of the new manager for 'addr'."
                  },
                  "id": 60,
                  "name": "ManagerChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 59,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 56,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 60,
                        "src": "2528:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 55,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2528:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 58,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newManager",
                        "nodeType": "VariableDeclaration",
                        "scope": 60,
                        "src": "2550:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 57,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2550:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2527:50:0"
                  },
                  "src": "2507:71:0"
                },
                {
                  "body": {
                    "id": 112,
                    "nodeType": "Block",
                    "src": "3301:338:0",
                    "statements": [
                      {
                        "assignments": [
                          71
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 71,
                            "mutability": "mutable",
                            "name": "addr",
                            "nodeType": "VariableDeclaration",
                            "scope": 112,
                            "src": "3311:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 70,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3311:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 82,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 77,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 72,
                              "name": "_addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 63,
                              "src": "3326:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 75,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3343:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 74,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3335:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 73,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3335:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 76,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3335:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "3326:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 80,
                            "name": "_addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 63,
                            "src": "3361:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 81,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "3326:40:0",
                          "trueExpression": {
                            "expression": {
                              "id": 78,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3348:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 79,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3348:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3311:55:0"
                      },
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 84,
                              "name": "_interfaceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 65,
                              "src": "3398:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 83,
                            "name": "isERC165Interface",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "3380:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bool_$",
                              "typeString": "function (bytes32) pure returns (bool)"
                            }
                          },
                          "id": 85,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3380:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 105,
                        "nodeType": "IfStatement",
                        "src": "3376:208:0",
                        "trueBody": {
                          "id": 104,
                          "nodeType": "Block",
                          "src": "3415:169:0",
                          "statements": [
                            {
                              "assignments": [
                                87
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 87,
                                  "mutability": "mutable",
                                  "name": "erc165InterfaceHash",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 104,
                                  "src": "3429:26:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  "typeName": {
                                    "id": 86,
                                    "name": "bytes4",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3429:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 92,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 90,
                                    "name": "_interfaceHash",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 65,
                                    "src": "3465:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 89,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3458:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes4_$",
                                    "typeString": "type(bytes4)"
                                  },
                                  "typeName": {
                                    "id": 88,
                                    "name": "bytes4",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3458:6:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 91,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3458:22:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "3429:51:0"
                            },
                            {
                              "expression": {
                                "condition": {
                                  "arguments": [
                                    {
                                      "id": 94,
                                      "name": "addr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 71,
                                      "src": "3527:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 95,
                                      "name": "erc165InterfaceHash",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 87,
                                      "src": "3533:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    ],
                                    "id": 93,
                                    "name": "implementsERC165Interface",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 341,
                                    "src": "3501:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$",
                                      "typeString": "function (address,bytes4) view returns (bool)"
                                    }
                                  },
                                  "id": 96,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3501:52:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 100,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3571:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 99,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3563:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 98,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3563:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 101,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3563:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "id": 102,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "Conditional",
                                "src": "3501:72:0",
                                "trueExpression": {
                                  "id": 97,
                                  "name": "addr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 71,
                                  "src": "3556:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "functionReturnParameters": 69,
                              "id": 103,
                              "nodeType": "Return",
                              "src": "3494:79:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 106,
                              "name": "interfaces",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34,
                              "src": "3600:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                                "typeString": "mapping(address => mapping(bytes32 => address))"
                              }
                            },
                            "id": 108,
                            "indexExpression": {
                              "id": 107,
                              "name": "addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 71,
                              "src": "3611:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3600:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 110,
                          "indexExpression": {
                            "id": 109,
                            "name": "_interfaceHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 65,
                            "src": "3617:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3600:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 69,
                        "id": 111,
                        "nodeType": "Return",
                        "src": "3593:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 61,
                    "nodeType": "StructuredDocumentation",
                    "src": "2584:608:0",
                    "text": "@notice Query if an address implements an interface and through which contract.\n @param _addr Address being queried for the implementer of an interface.\n (If '_addr' is the zero address then 'msg.sender' is assumed.)\n @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.\n @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\n or '0' if '_addr' did not register an implementer for this interface."
                  },
                  "functionSelector": "aabbb8ca",
                  "id": 113,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getInterfaceImplementer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 66,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 63,
                        "mutability": "mutable",
                        "name": "_addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3230:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 62,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3230:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 65,
                        "mutability": "mutable",
                        "name": "_interfaceHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3245:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 64,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3245:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3229:39:0"
                  },
                  "returnParameters": {
                    "id": 69,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 68,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3292:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 67,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3292:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3291:9:0"
                  },
                  "scope": 454,
                  "src": "3197:442:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 194,
                    "nodeType": "Block",
                    "src": "4388:682:0",
                    "statements": [
                      {
                        "assignments": [
                          124
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 124,
                            "mutability": "mutable",
                            "name": "addr",
                            "nodeType": "VariableDeclaration",
                            "scope": 194,
                            "src": "4398:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 123,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4398:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 135,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 130,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 125,
                              "name": "_addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "4413:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 128,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4430:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 127,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4422:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 126,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4422:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 129,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4422:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "4413:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 133,
                            "name": "_addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 116,
                            "src": "4448:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "4413:40:0",
                          "trueExpression": {
                            "expression": {
                              "id": 131,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4435:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4435:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4398:55:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 142,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 138,
                                    "name": "addr",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 124,
                                    "src": "4482:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 137,
                                  "name": "getManager",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 259,
                                  "src": "4471:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                                    "typeString": "function (address) view returns (address)"
                                  }
                                },
                                "id": 139,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4471:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 140,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4491:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 141,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4491:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "4471:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420746865206d616e61676572",
                              "id": 143,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4503:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_05d265f35446405bb8e248c5b20b42f74b593c053f831f072952d663e40433c2",
                                "typeString": "literal_string \"Not the manager\""
                              },
                              "value": "Not the manager"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_05d265f35446405bb8e248c5b20b42f74b593c053f831f072952d663e40433c2",
                                "typeString": "literal_string \"Not the manager\""
                              }
                            ],
                            "id": 136,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4463:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4463:58:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 145,
                        "nodeType": "ExpressionStatement",
                        "src": "4463:58:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 150,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "4540:34:0",
                              "subExpression": {
                                "arguments": [
                                  {
                                    "id": 148,
                                    "name": "_interfaceHash",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 118,
                                    "src": "4559:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 147,
                                  "name": "isERC165Interface",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 435,
                                  "src": "4541:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bool_$",
                                    "typeString": "function (bytes32) pure returns (bool)"
                                  }
                                },
                                "id": 149,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4541:33:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4d757374206e6f7420626520616e204552433136352068617368",
                              "id": 151,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4576:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7dd17e3bdc8c01861fedac2891b332ca9e60a72297f10c299d56bc0c5395549d",
                                "typeString": "literal_string \"Must not be an ERC165 hash\""
                              },
                              "value": "Must not be an ERC165 hash"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7dd17e3bdc8c01861fedac2891b332ca9e60a72297f10c299d56bc0c5395549d",
                                "typeString": "literal_string \"Must not be an ERC165 hash\""
                              }
                            ],
                            "id": 146,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4532:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4532:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 153,
                        "nodeType": "ExpressionStatement",
                        "src": "4532:73:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 164,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 154,
                              "name": "_implementer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 120,
                              "src": "4619:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 157,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4643:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4635:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 155,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4635:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 158,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4635:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "4619:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 163,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 160,
                              "name": "_implementer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 120,
                              "src": "4649:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "expression": {
                                "id": 161,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4665:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4665:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "4649:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4619:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 179,
                        "nodeType": "IfStatement",
                        "src": "4615:318:0",
                        "trueBody": {
                          "id": 178,
                          "nodeType": "Block",
                          "src": "4677:256:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    "id": 174,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "id": 170,
                                          "name": "_interfaceHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 118,
                                          "src": "4811:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        {
                                          "id": 171,
                                          "name": "addr",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 124,
                                          "src": "4827:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "id": 167,
                                              "name": "_implementer",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 120,
                                              "src": "4744:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 166,
                                            "name": "ERC1820ImplementerInterface",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 13,
                                            "src": "4716:27:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_ERC1820ImplementerInterface_$13_$",
                                              "typeString": "type(contract ERC1820ImplementerInterface)"
                                            }
                                          },
                                          "id": 168,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "4716:41:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ERC1820ImplementerInterface_$13",
                                            "typeString": "contract ERC1820ImplementerInterface"
                                          }
                                        },
                                        "id": 169,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "canImplementInterfaceForAddress",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 12,
                                        "src": "4716:94:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes32,address) view external returns (bytes32)"
                                        }
                                      },
                                      "id": 172,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4716:116:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "id": 173,
                                      "name": "ERC1820_ACCEPT_MAGIC",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 28,
                                      "src": "4836:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "src": "4716:140:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "446f6573206e6f7420696d706c656d656e742074686520696e74657266616365",
                                    "id": 175,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4874:34:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c92cae19700c9af80bbef3a32b31347feeed2544373f4066d22ba2f8466a32b0",
                                      "typeString": "literal_string \"Does not implement the interface\""
                                    },
                                    "value": "Does not implement the interface"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_c92cae19700c9af80bbef3a32b31347feeed2544373f4066d22ba2f8466a32b0",
                                      "typeString": "literal_string \"Does not implement the interface\""
                                    }
                                  ],
                                  "id": 165,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "4691:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 176,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4691:231:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 177,
                              "nodeType": "ExpressionStatement",
                              "src": "4691:231:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 180,
                                "name": "interfaces",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "4942:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                                  "typeString": "mapping(address => mapping(bytes32 => address))"
                                }
                              },
                              "id": 183,
                              "indexExpression": {
                                "id": 181,
                                "name": "addr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 124,
                                "src": "4953:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4942:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 184,
                            "indexExpression": {
                              "id": 182,
                              "name": "_interfaceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "4959:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4942:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 185,
                            "name": "_implementer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 120,
                            "src": "4977:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4942:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 187,
                        "nodeType": "ExpressionStatement",
                        "src": "4942:47:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 189,
                              "name": "addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 124,
                              "src": "5028:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 190,
                              "name": "_interfaceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "5034:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 191,
                              "name": "_implementer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 120,
                              "src": "5050:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 188,
                            "name": "InterfaceImplementerSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 53,
                            "src": "5004:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_address_$returns$__$",
                              "typeString": "function (address,bytes32,address)"
                            }
                          },
                          "id": 192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5004:59:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 193,
                        "nodeType": "EmitStatement",
                        "src": "4999:64:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 114,
                    "nodeType": "StructuredDocumentation",
                    "src": "3645:635:0",
                    "text": "@notice Sets the contract which implements a specific interface for an address.\n Only the manager defined for that address can set it.\n (Each address is the manager for itself until it sets a new manager.)\n @param _addr Address for which to set the interface.\n (If '_addr' is the zero address then 'msg.sender' is assumed.)\n @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.\n @param _implementer Contract address implementing '_interfaceHash' for '_addr'."
                  },
                  "functionSelector": "29965a1d",
                  "id": 195,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setInterfaceImplementer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 121,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 116,
                        "mutability": "mutable",
                        "name": "_addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 195,
                        "src": "4318:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4318:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 118,
                        "mutability": "mutable",
                        "name": "_interfaceHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 195,
                        "src": "4333:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 117,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4333:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 120,
                        "mutability": "mutable",
                        "name": "_implementer",
                        "nodeType": "VariableDeclaration",
                        "scope": 195,
                        "src": "4357:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 119,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4357:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4317:61:0"
                  },
                  "returnParameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4388:0:0"
                  },
                  "scope": 454,
                  "src": "4285:785:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 232,
                    "nodeType": "Block",
                    "src": "5459:200:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 209,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 205,
                                    "name": "_addr",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 198,
                                    "src": "5488:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 204,
                                  "name": "getManager",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 259,
                                  "src": "5477:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                                    "typeString": "function (address) view returns (address)"
                                  }
                                },
                                "id": 206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5477:17:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 207,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "5498:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 208,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "5498:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "5477:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420746865206d616e61676572",
                              "id": 210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5510:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_05d265f35446405bb8e248c5b20b42f74b593c053f831f072952d663e40433c2",
                                "typeString": "literal_string \"Not the manager\""
                              },
                              "value": "Not the manager"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_05d265f35446405bb8e248c5b20b42f74b593c053f831f072952d663e40433c2",
                                "typeString": "literal_string \"Not the manager\""
                              }
                            ],
                            "id": 203,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5469:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5469:59:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 212,
                        "nodeType": "ExpressionStatement",
                        "src": "5469:59:0"
                      },
                      {
                        "expression": {
                          "id": 225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 213,
                              "name": "managers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38,
                              "src": "5538:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 215,
                            "indexExpression": {
                              "id": 214,
                              "name": "_addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 198,
                              "src": "5547:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5538:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 218,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 216,
                                "name": "_newManager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 200,
                                "src": "5556:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 217,
                                "name": "_addr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 198,
                                "src": "5571:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "5556:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseExpression": {
                              "id": 223,
                              "name": "_newManager",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 200,
                              "src": "5592:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "Conditional",
                            "src": "5556:47:0",
                            "trueExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 221,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5587:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 220,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5579:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 219,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5579:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 222,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5579:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5538:65:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 226,
                        "nodeType": "ExpressionStatement",
                        "src": "5538:65:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 228,
                              "name": "_addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 198,
                              "src": "5633:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 229,
                              "name": "_newManager",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 200,
                              "src": "5640:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 227,
                            "name": "ManagerChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60,
                            "src": "5618:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5618:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 231,
                        "nodeType": "EmitStatement",
                        "src": "5613:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 196,
                    "nodeType": "StructuredDocumentation",
                    "src": "5076:313:0",
                    "text": "@notice Sets '_newManager' as manager for '_addr'.\n The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\n @param _addr Address for which to set the new manager.\n @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)"
                  },
                  "functionSelector": "5df8122f",
                  "id": 233,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setManager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 201,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 198,
                        "mutability": "mutable",
                        "name": "_addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 233,
                        "src": "5414:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 197,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5414:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 200,
                        "mutability": "mutable",
                        "name": "_newManager",
                        "nodeType": "VariableDeclaration",
                        "scope": 233,
                        "src": "5429:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 199,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5429:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5413:36:0"
                  },
                  "returnParameters": {
                    "id": 202,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5459:0:0"
                  },
                  "scope": 454,
                  "src": "5394:265:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 258,
                    "nodeType": "Block",
                    "src": "5898:209:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 241,
                              "name": "managers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38,
                              "src": "5980:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 243,
                            "indexExpression": {
                              "id": 242,
                              "name": "_addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 236,
                              "src": "5989:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5980:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 246,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6007:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5999:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 244,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5999:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 247,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5999:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "5980:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 256,
                          "nodeType": "Block",
                          "src": "6054:47:0",
                          "statements": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 252,
                                  "name": "managers",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38,
                                  "src": "6075:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                    "typeString": "mapping(address => address)"
                                  }
                                },
                                "id": 254,
                                "indexExpression": {
                                  "id": 253,
                                  "name": "_addr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 236,
                                  "src": "6084:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6075:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "functionReturnParameters": 240,
                              "id": 255,
                              "nodeType": "Return",
                              "src": "6068:22:0"
                            }
                          ]
                        },
                        "id": 257,
                        "nodeType": "IfStatement",
                        "src": "5976:125:0",
                        "trueBody": {
                          "id": 251,
                          "nodeType": "Block",
                          "src": "6011:37:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 249,
                                "name": "_addr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 236,
                                "src": "6032:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "functionReturnParameters": 240,
                              "id": 250,
                              "nodeType": "Return",
                              "src": "6025:12:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 234,
                    "nodeType": "StructuredDocumentation",
                    "src": "5665:164:0",
                    "text": "@notice Get the manager of an address.\n @param _addr Address for which to return the manager.\n @return Address of the manager for a given address."
                  },
                  "functionSelector": "3d584063",
                  "id": 259,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getManager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 237,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 236,
                        "mutability": "mutable",
                        "name": "_addr",
                        "nodeType": "VariableDeclaration",
                        "scope": 259,
                        "src": "5854:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 235,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5854:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5853:15:0"
                  },
                  "returnParameters": {
                    "id": 240,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 239,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 259,
                        "src": "5889:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 238,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5889:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5888:9:0"
                  },
                  "scope": 454,
                  "src": "5834:273:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 274,
                    "nodeType": "Block",
                    "src": "6384:67:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 270,
                                  "name": "_interfaceName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 262,
                                  "src": "6428:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_calldata_ptr",
                                    "typeString": "string calldata"
                                  }
                                ],
                                "expression": {
                                  "id": 268,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "6411:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 269,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "6411:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 271,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6411:32:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 267,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "6401:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 272,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6401:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 266,
                        "id": 273,
                        "nodeType": "Return",
                        "src": "6394:50:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 260,
                    "nodeType": "StructuredDocumentation",
                    "src": "6113:180:0",
                    "text": "@notice Compute the keccak256 hash of an interface given its name.\n @param _interfaceName Name of the interface.\n @return The keccak256 hash of an interface name."
                  },
                  "functionSelector": "65ba36c1",
                  "id": 275,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "interfaceHash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 263,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 262,
                        "mutability": "mutable",
                        "name": "_interfaceName",
                        "nodeType": "VariableDeclaration",
                        "scope": 275,
                        "src": "6321:30:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 261,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6321:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6320:32:0"
                  },
                  "returnParameters": {
                    "id": 266,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 265,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 275,
                        "src": "6375:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 264,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6375:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6374:9:0"
                  },
                  "scope": 454,
                  "src": "6298:153:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 308,
                    "nodeType": "Block",
                    "src": "6900:204:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 283,
                                "name": "interfaces",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "6910:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                                  "typeString": "mapping(address => mapping(bytes32 => address))"
                                }
                              },
                              "id": 286,
                              "indexExpression": {
                                "id": 284,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 278,
                                "src": "6921:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6910:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 287,
                            "indexExpression": {
                              "id": 285,
                              "name": "_interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 280,
                              "src": "6932:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6910:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "condition": {
                              "arguments": [
                                {
                                  "id": 289,
                                  "name": "_contract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 278,
                                  "src": "6994:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 290,
                                  "name": "_interfaceId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 280,
                                  "src": "7005:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "id": 288,
                                "name": "implementsERC165InterfaceNoCache",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 420,
                                "src": "6948:32:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$",
                                  "typeString": "function (address,bytes4) view returns (bool)"
                                }
                              },
                              "id": 291,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6948:70:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 295,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7041:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 294,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7033:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 293,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7033:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 296,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7033:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "Conditional",
                            "src": "6948:95:0",
                            "trueExpression": {
                              "id": 292,
                              "name": "_contract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 278,
                              "src": "7021:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6910:133:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 299,
                        "nodeType": "ExpressionStatement",
                        "src": "6910:133:0"
                      },
                      {
                        "expression": {
                          "id": 306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 300,
                                "name": "erc165Cached",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 44,
                                "src": "7053:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes4_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(bytes4 => bool))"
                                }
                              },
                              "id": 303,
                              "indexExpression": {
                                "id": 301,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 278,
                                "src": "7066:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7053:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 304,
                            "indexExpression": {
                              "id": 302,
                              "name": "_interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 280,
                              "src": "7077:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7053:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 305,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7093:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "7053:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 307,
                        "nodeType": "ExpressionStatement",
                        "src": "7053:44:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 276,
                    "nodeType": "StructuredDocumentation",
                    "src": "6569:250:0",
                    "text": "@notice Updates the cache with whether the contract implements an ERC165 interface or not.\n @param _contract Address of the contract for which to update the cache.\n @param _interfaceId ERC165 interface for which to update the cache."
                  },
                  "functionSelector": "a41e7d51",
                  "id": 309,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateERC165Cache",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 278,
                        "mutability": "mutable",
                        "name": "_contract",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "6851:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 277,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6851:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "_interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "6870:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "6870:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6850:40:0"
                  },
                  "returnParameters": {
                    "id": 282,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6900:0:0"
                  },
                  "scope": 454,
                  "src": "6824:280:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 340,
                    "nodeType": "Block",
                    "src": "7750:214:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "7764:38:0",
                          "subExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 319,
                                "name": "erc165Cached",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 44,
                                "src": "7765:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes4_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(bytes4 => bool))"
                                }
                              },
                              "id": 321,
                              "indexExpression": {
                                "id": 320,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 312,
                                "src": "7778:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7765:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 323,
                            "indexExpression": {
                              "id": 322,
                              "name": "_interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 314,
                              "src": "7789:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7765:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 331,
                        "nodeType": "IfStatement",
                        "src": "7760:133:0",
                        "trueBody": {
                          "id": 330,
                          "nodeType": "Block",
                          "src": "7804:89:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 326,
                                    "name": "_contract",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 312,
                                    "src": "7858:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 327,
                                    "name": "_interfaceId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 314,
                                    "src": "7869:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  ],
                                  "id": 325,
                                  "name": "implementsERC165InterfaceNoCache",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 420,
                                  "src": "7825:32:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$",
                                    "typeString": "function (address,bytes4) view returns (bool)"
                                  }
                                },
                                "id": 328,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7825:57:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "functionReturnParameters": 318,
                              "id": 329,
                              "nodeType": "Return",
                              "src": "7818:64:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 332,
                                "name": "interfaces",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "7909:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_address_$_$",
                                  "typeString": "mapping(address => mapping(bytes32 => address))"
                                }
                              },
                              "id": 334,
                              "indexExpression": {
                                "id": 333,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 312,
                                "src": "7920:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7909:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 336,
                            "indexExpression": {
                              "id": 335,
                              "name": "_interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 314,
                              "src": "7931:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7909:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 337,
                            "name": "_contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 312,
                            "src": "7948:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7909:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 318,
                        "id": 339,
                        "nodeType": "Return",
                        "src": "7902:55:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 310,
                    "nodeType": "StructuredDocumentation",
                    "src": "7454:189:0",
                    "text": "@param _contract Address of the contract to check.\n @param _interfaceId ERC165 interface to check.\n @return True if '_contract' implements '_interfaceId', false otherwise."
                  },
                  "functionSelector": "f712f3e8",
                  "id": 341,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "implementsERC165Interface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 315,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 312,
                        "mutability": "mutable",
                        "name": "_contract",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "7683:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 311,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7683:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 314,
                        "mutability": "mutable",
                        "name": "_interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "7702:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 313,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "7702:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7682:40:0"
                  },
                  "returnParameters": {
                    "id": 318,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 317,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "7744:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 316,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7744:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7743:6:0"
                  },
                  "scope": 454,
                  "src": "7648:316:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 419,
                    "nodeType": "Block",
                    "src": "8391:509:0",
                    "statements": [
                      {
                        "assignments": [
                          352
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 352,
                            "mutability": "mutable",
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 419,
                            "src": "8401:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 351,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8401:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 353,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8401:15:0"
                      },
                      {
                        "assignments": [
                          355
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 355,
                            "mutability": "mutable",
                            "name": "result",
                            "nodeType": "VariableDeclaration",
                            "scope": 419,
                            "src": "8426:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 354,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8426:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 356,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8426:14:0"
                      },
                      {
                        "expression": {
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "components": [
                              {
                                "id": 357,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 352,
                                "src": "8452:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 358,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 355,
                                "src": "8461:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 359,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "8451:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 361,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 344,
                                "src": "8483:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 362,
                                "name": "ERC165ID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20,
                                "src": "8494:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "id": 360,
                              "name": "noThrowCall",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 453,
                              "src": "8471:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_uint256_$_t_uint256_$",
                                "typeString": "function (address,bytes4) view returns (uint256,uint256)"
                              }
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8471:32:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "src": "8451:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 365,
                        "nodeType": "ExpressionStatement",
                        "src": "8451:52:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 366,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 352,
                              "src": "8517:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 367,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8528:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "8517:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 371,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 369,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "8533:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8543:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "8533:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "8517:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 376,
                        "nodeType": "IfStatement",
                        "src": "8513:70:0",
                        "trueBody": {
                          "id": 375,
                          "nodeType": "Block",
                          "src": "8546:37:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 373,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8567:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "functionReturnParameters": 350,
                              "id": 374,
                              "nodeType": "Return",
                              "src": "8560:12:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "components": [
                              {
                                "id": 377,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 352,
                                "src": "8594:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 378,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 355,
                                "src": "8603:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 379,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "8593:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 381,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 344,
                                "src": "8625:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 382,
                                "name": "INVALID_ID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 17,
                                "src": "8636:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "id": 380,
                              "name": "noThrowCall",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 453,
                              "src": "8613:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_uint256_$_t_uint256_$",
                                "typeString": "function (address,bytes4) view returns (uint256,uint256)"
                              }
                            },
                            "id": 383,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8613:34:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "src": "8593:54:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 385,
                        "nodeType": "ExpressionStatement",
                        "src": "8593:54:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 388,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 386,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 352,
                              "src": "8661:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 387,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8672:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "8661:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 389,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "8677:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 390,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8687:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "8677:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "8661:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 396,
                        "nodeType": "IfStatement",
                        "src": "8657:70:0",
                        "trueBody": {
                          "id": 395,
                          "nodeType": "Block",
                          "src": "8690:37:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 393,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8711:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "functionReturnParameters": 350,
                              "id": 394,
                              "nodeType": "Return",
                              "src": "8704:12:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 404,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "components": [
                              {
                                "id": 397,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 352,
                                "src": "8738:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 398,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 355,
                                "src": "8747:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 399,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "8737:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 401,
                                "name": "_contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 344,
                                "src": "8769:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 402,
                                "name": "_interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 346,
                                "src": "8780:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "id": 400,
                              "name": "noThrowCall",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 453,
                              "src": "8757:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_uint256_$_t_uint256_$",
                                "typeString": "function (address,bytes4) view returns (uint256,uint256)"
                              }
                            },
                            "id": 403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8757:36:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "src": "8737:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 405,
                        "nodeType": "ExpressionStatement",
                        "src": "8737:56:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 412,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 408,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 406,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 352,
                              "src": "8807:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 407,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8818:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "8807:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 411,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 409,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "8823:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 410,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8833:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "8823:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "8807:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 416,
                        "nodeType": "IfStatement",
                        "src": "8803:69:0",
                        "trueBody": {
                          "id": 415,
                          "nodeType": "Block",
                          "src": "8836:36:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 413,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8857:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 350,
                              "id": 414,
                              "nodeType": "Return",
                              "src": "8850:11:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8888:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 350,
                        "id": 418,
                        "nodeType": "Return",
                        "src": "8881:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 342,
                    "nodeType": "StructuredDocumentation",
                    "src": "7970:307:0",
                    "text": "@notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n @param _contract Address of the contract to check.\n @param _interfaceId ERC165 interface to check.\n @return True if '_contract' implements '_interfaceId', false otherwise."
                  },
                  "functionSelector": "b7056765",
                  "id": 420,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "implementsERC165InterfaceNoCache",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 347,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 344,
                        "mutability": "mutable",
                        "name": "_contract",
                        "nodeType": "VariableDeclaration",
                        "scope": 420,
                        "src": "8324:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 343,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8324:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 346,
                        "mutability": "mutable",
                        "name": "_interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 420,
                        "src": "8343:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 345,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "8343:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8323:40:0"
                  },
                  "returnParameters": {
                    "id": 350,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 349,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 420,
                        "src": "8385:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 348,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "8385:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8384:6:0"
                  },
                  "scope": 454,
                  "src": "8282:618:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 434,
                    "nodeType": "Block",
                    "src": "9235:112:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 430,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 428,
                              "name": "_interfaceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 423,
                              "src": "9252:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&",
                            "rightExpression": {
                              "hexValue": "307830303030303030304646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646",
                              "id": 429,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9269:66:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_26959946667150639794667015087019630673637144422540572481103610249215_by_1",
                                "typeString": "int_const 2695...(60 digits omitted)...9215"
                              },
                              "value": "0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                            },
                            "src": "9252:83:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 431,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9339:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "9252:88:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 427,
                        "id": 433,
                        "nodeType": "Return",
                        "src": "9245:95:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 421,
                    "nodeType": "StructuredDocumentation",
                    "src": "8906:244:0",
                    "text": "@notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\n @param _interfaceHash The hash to check.\n @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise."
                  },
                  "id": 435,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isERC165Interface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 424,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 423,
                        "mutability": "mutable",
                        "name": "_interfaceHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 435,
                        "src": "9182:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 422,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9182:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9181:24:0"
                  },
                  "returnParameters": {
                    "id": 427,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 426,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 435,
                        "src": "9229:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 425,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9229:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9228:6:0"
                  },
                  "scope": 454,
                  "src": "9155:192:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 452,
                    "nodeType": "Block",
                    "src": "9570:936:0",
                    "statements": [
                      {
                        "assignments": [
                          448
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 448,
                            "mutability": "mutable",
                            "name": "erc165ID",
                            "nodeType": "VariableDeclaration",
                            "scope": 452,
                            "src": "9580:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "typeName": {
                              "id": 447,
                              "name": "bytes4",
                              "nodeType": "ElementaryTypeName",
                              "src": "9580:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 450,
                        "initialValue": {
                          "id": 449,
                          "name": "ERC165ID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20,
                          "src": "9598:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9580:26:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "9626:874:0",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9640:20:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9655:4:0",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9649:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9649:11:0"
                              },
                              "variables": [
                                {
                                  "name": "x",
                                  "nodeType": "YulTypedName",
                                  "src": "9644:1:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "9753:1:0"
                                  },
                                  {
                                    "name": "erc165ID",
                                    "nodeType": "YulIdentifier",
                                    "src": "9756:8:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9746:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9746:19:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9746:19:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "9853:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9856:4:0",
                                        "type": "",
                                        "value": "0x04"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9849:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9849:12:0"
                                  },
                                  {
                                    "name": "_interfaceId",
                                    "nodeType": "YulIdentifier",
                                    "src": "9863:12:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9842:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9842:34:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9842:34:0"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9941:482:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9980:5:0",
                                    "type": "",
                                    "value": "30000"
                                  },
                                  {
                                    "name": "_contract",
                                    "nodeType": "YulIdentifier",
                                    "src": "10038:9:0"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "10096:1:0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10178:4:0",
                                    "type": "",
                                    "value": "0x24"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "10262:1:0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10350:4:0",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "staticcall",
                                  "nodeType": "YulIdentifier",
                                  "src": "9952:10:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9952:471:0"
                              },
                              "variableNames": [
                                {
                                  "name": "success",
                                  "nodeType": "YulIdentifier",
                                  "src": "9941:7:0"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10437:18:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "10453:1:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10447:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10447:8:0"
                              },
                              "variableNames": [
                                {
                                  "name": "result",
                                  "nodeType": "YulIdentifier",
                                  "src": "10437:6:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 438,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "10038:9:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 440,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "9863:12:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 448,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "9756:8:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 445,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "10437:6:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 443,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "9941:7:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 451,
                        "nodeType": "InlineAssembly",
                        "src": "9617:883:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 436,
                    "nodeType": "StructuredDocumentation",
                    "src": "9353:83:0",
                    "text": "@dev Make a call on a contract without throwing if the function does not exist."
                  },
                  "id": 453,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "noThrowCall",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 441,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 438,
                        "mutability": "mutable",
                        "name": "_contract",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "9462:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 437,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9462:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 440,
                        "mutability": "mutable",
                        "name": "_interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "9481:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 439,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "9481:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9461:40:0"
                  },
                  "returnParameters": {
                    "id": 446,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 443,
                        "mutability": "mutable",
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "9533:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 442,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9533:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 445,
                        "mutability": "mutable",
                        "name": "result",
                        "nodeType": "VariableDeclaration",
                        "scope": 453,
                        "src": "9550:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 444,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9550:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9532:33:0"
                  },
                  "scope": 454,
                  "src": "9441:1065:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 455,
              "src": "1776:8732:0"
            }
          ],
          "src": "755:9754:0"
        },
        "id": 0
      }
    }
  }
}

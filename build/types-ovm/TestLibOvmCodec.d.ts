/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestLibOvmCodecInterface extends ethers.utils.Interface {
  functions: {
    "decodeEIP155Transaction(bytes,bool)": FunctionFragment;
    "decompressEIP155Transaction(bytes,uint256)": FunctionFragment;
    "encodeTransaction(tuple)": FunctionFragment;
    "hashTransaction(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeEIP155Transaction",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "decompressEIP155Transaction",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransaction",
    values: [
      {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTransaction",
    values: [
      {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeEIP155Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decompressEIP155Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashTransaction",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestLibOvmCodec extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestLibOvmCodecInterface;

  functions: {
    decodeEIP155Transaction(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _decoded: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        chainId: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: BigNumber;
      };
      0: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        chainId: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: BigNumber;
      };
    }>;

    "decodeEIP155Transaction(bytes,bool)"(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _decoded: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        chainId: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: BigNumber;
      };
      0: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        chainId: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: BigNumber;
      };
    }>;

    decompressEIP155Transaction(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decompressEIP155Transaction(bytes,uint256)"(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    encodeTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      _encoded: string;
      0: string;
    }>;

    "encodeTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      _encoded: string;
      0: string;
    }>;

    hashTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      _hash: string;
      0: string;
    }>;

    "hashTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      _hash: string;
      0: string;
    }>;
  };

  decodeEIP155Transaction(
    _transaction: BytesLike,
    _isEthSignedMessage: boolean,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    gasPrice: BigNumber;
    gasLimit: BigNumber;
    to: string;
    value: BigNumber;
    data: string;
    chainId: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: BigNumber;
  }>;

  "decodeEIP155Transaction(bytes,bool)"(
    _transaction: BytesLike,
    _isEthSignedMessage: boolean,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    gasPrice: BigNumber;
    gasLimit: BigNumber;
    to: string;
    value: BigNumber;
    data: string;
    chainId: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: BigNumber;
  }>;

  decompressEIP155Transaction(
    _transaction: BytesLike,
    _chainId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decompressEIP155Transaction(bytes,uint256)"(
    _transaction: BytesLike,
    _chainId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  encodeTransaction(
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeTransaction(tuple)"(
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashTransaction(
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "hashTransaction(tuple)"(
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decodeEIP155Transaction(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      chainId: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    "decodeEIP155Transaction(bytes,bool)"(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      chainId: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    decompressEIP155Transaction(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      chainId: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    "decompressEIP155Transaction(bytes,uint256)"(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      chainId: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    encodeTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hashTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decodeEIP155Transaction(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeEIP155Transaction(bytes,bool)"(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decompressEIP155Transaction(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decompressEIP155Transaction(bytes,uint256)"(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    encodeTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeEIP155Transaction(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeEIP155Transaction(bytes,bool)"(
      _transaction: BytesLike,
      _isEthSignedMessage: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decompressEIP155Transaction(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decompressEIP155Transaction(bytes,uint256)"(
      _transaction: BytesLike,
      _chainId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    encodeTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTransaction(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashTransaction(tuple)"(
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOvmDeployerWhitelistInterface extends ethers.utils.Interface {
  functions: {
    "enableArbitraryContractDeployment()": FunctionFragment;
    "initialize(address,bool)": FunctionFragment;
    "isDeployerAllowed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setAllowArbitraryDeployment(bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setWhitelistedDeployer(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enableArbitraryContractDeployment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployerAllowed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllowArbitraryDeployment",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedDeployer",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "enableArbitraryContractDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeployerAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowArbitraryDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedDeployer",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOvmDeployerWhitelist extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOvmDeployerWhitelistInterface;

  functions: {
    enableArbitraryContractDeployment(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableArbitraryContractDeployment()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,bool)"(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDeployerAllowed(
      _deployer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isDeployerAllowed(address)"(
      _deployer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: Overrides): Promise<ContractTransaction>;

    "owner()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAllowArbitraryDeployment(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowArbitraryDeployment(bool)"(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistedDeployer(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistedDeployer(address,bool)"(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  enableArbitraryContractDeployment(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableArbitraryContractDeployment()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _allowArbitraryDeployment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,bool)"(
    _owner: string,
    _allowArbitraryDeployment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDeployerAllowed(
    _deployer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isDeployerAllowed(address)"(
    _deployer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: Overrides): Promise<ContractTransaction>;

  "owner()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAllowArbitraryDeployment(
    _allowArbitraryDeployment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowArbitraryDeployment(bool)"(
    _allowArbitraryDeployment: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistedDeployer(
    _deployer: string,
    _isWhitelisted: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistedDeployer(address,bool)"(
    _deployer: string,
    _isWhitelisted: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    enableArbitraryContractDeployment(overrides?: CallOverrides): Promise<void>;

    "enableArbitraryContractDeployment()"(
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,bool)"(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isDeployerAllowed(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDeployerAllowed(address)"(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setAllowArbitraryDeployment(
      _allowArbitraryDeployment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowArbitraryDeployment(bool)"(
      _allowArbitraryDeployment: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedDeployer(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhitelistedDeployer(address,bool)"(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    enableArbitraryContractDeployment(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableArbitraryContractDeployment()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,bool)"(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDeployerAllowed(
      _deployer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "isDeployerAllowed(address)"(
      _deployer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: Overrides): Promise<BigNumber>;

    "owner()"(overrides?: Overrides): Promise<BigNumber>;

    setAllowArbitraryDeployment(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowArbitraryDeployment(bool)"(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistedDeployer(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhitelistedDeployer(address,bool)"(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enableArbitraryContractDeployment(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableArbitraryContractDeployment()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,bool)"(
      _owner: string,
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDeployerAllowed(
      _deployer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isDeployerAllowed(address)"(
      _deployer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAllowArbitraryDeployment(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowArbitraryDeployment(bool)"(
      _allowArbitraryDeployment: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistedDeployer(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistedDeployer(address,bool)"(
      _deployer: string,
      _isWhitelisted: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

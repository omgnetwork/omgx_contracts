/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OvmFraudVerifierInterface extends ethers.utils.Interface {
  functions: {
    "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)": FunctionFragment;
    "getStateTransitioner(bytes32,bytes32)": FunctionFragment;
    "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)": FunctionFragment;
    "libAddressManager()": FunctionFragment;
    "resolve(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeFraudVerification",
    values: [
      BytesLike,
      {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      { index: BigNumberish; siblings: BytesLike[] },
      BytesLike,
      BytesLike,
      {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      { index: BigNumberish; siblings: BytesLike[] }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTransitioner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFraudVerification",
    values: [
      BytesLike,
      {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      { index: BigNumberish; siblings: BytesLike[] },
      {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      { index: BigNumberish; siblings: BytesLike[] }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "libAddressManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "finalizeFraudVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTransitioner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeFraudVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {
    "FraudProofFinalized(bytes32,uint256,bytes32,address)": EventFragment;
    "FraudProofInitialized(bytes32,uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FraudProofFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FraudProofInitialized"): EventFragment;
}

export class OvmFraudVerifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OvmFraudVerifierInterface;

  functions: {
    finalizeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStateTransitioner(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _transitioner: string;
      0: string;
    }>;

    "getStateTransitioner(bytes32,bytes32)"(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _transitioner: string;
      0: string;
    }>;

    initializeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    libAddressManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  finalizeFraudVerification(
    _preStateRoot: BytesLike,
    _preStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    _txHash: BytesLike,
    _postStateRoot: BytesLike,
    _postStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)"(
    _preStateRoot: BytesLike,
    _preStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    _txHash: BytesLike,
    _postStateRoot: BytesLike,
    _postStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStateTransitioner(
    _preStateRoot: BytesLike,
    _txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getStateTransitioner(bytes32,bytes32)"(
    _preStateRoot: BytesLike,
    _txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initializeFraudVerification(
    _preStateRoot: BytesLike,
    _preStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    _txChainElement: {
      isSequenced: boolean;
      queueIndex: BigNumberish;
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      txData: BytesLike;
    },
    _transactionBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)"(
    _preStateRoot: BytesLike,
    _preStateRootBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
    _transaction: {
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      l1QueueOrigin: BigNumberish;
      l1TxOrigin: string;
      entrypoint: string;
      gasLimit: BigNumberish;
      data: BytesLike;
    },
    _txChainElement: {
      isSequenced: boolean;
      queueIndex: BigNumberish;
      timestamp: BigNumberish;
      blockNumber: BigNumberish;
      txData: BytesLike;
    },
    _transactionBatchHeader: {
      batchIndex: BigNumberish;
      batchRoot: BytesLike;
      batchSize: BigNumberish;
      prevTotalElements: BigNumberish;
      extraData: BytesLike;
    },
    _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  libAddressManager(overrides?: CallOverrides): Promise<string>;

  "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

  resolve(_name: string, overrides?: CallOverrides): Promise<string>;

  "resolve(string)"(_name: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    finalizeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: CallOverrides
    ): Promise<void>;

    getStateTransitioner(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStateTransitioner(bytes32,bytes32)"(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initializeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: CallOverrides
    ): Promise<void>;

    libAddressManager(overrides?: CallOverrides): Promise<string>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

    resolve(_name: string, overrides?: CallOverrides): Promise<string>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    FraudProofFinalized(
      _preStateRoot: null,
      _preStateRootIndex: null,
      _transactionHash: null,
      _who: null
    ): EventFilter;

    FraudProofInitialized(
      _preStateRoot: null,
      _preStateRootIndex: null,
      _transactionHash: null,
      _who: null
    ): EventFilter;
  };

  estimateGas: {
    finalizeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getStateTransitioner(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStateTransitioner(bytes32,bytes32)"(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<BigNumber>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    resolve(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeFraudVerification(bytes32,tuple,tuple,bytes32,bytes32,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _txHash: BytesLike,
      _postStateRoot: BytesLike,
      _postStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _postStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getStateTransitioner(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStateTransitioner(bytes32,bytes32)"(
      _preStateRoot: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeFraudVerification(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeFraudVerification(bytes32,tuple,tuple,tuple,tuple,tuple,tuple)"(
      _preStateRoot: BytesLike,
      _preStateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _preStateRootProof: { index: BigNumberish; siblings: BytesLike[] },
      _transaction: {
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        l1QueueOrigin: BigNumberish;
        l1TxOrigin: string;
        entrypoint: string;
        gasLimit: BigNumberish;
        data: BytesLike;
      },
      _txChainElement: {
        isSequenced: boolean;
        queueIndex: BigNumberish;
        timestamp: BigNumberish;
        blockNumber: BigNumberish;
        txData: BytesLike;
      },
      _transactionBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      },
      _transactionProof: { index: BigNumberish; siblings: BytesLike[] },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    libAddressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestLibSecureMerkleTrieInterface extends ethers.utils.Interface {
  functions: {
    "get(bytes,bytes,bytes32)": FunctionFragment;
    "getSingleNodeRootHash(bytes,bytes)": FunctionFragment;
    "update(bytes,bytes,bytes,bytes32)": FunctionFragment;
    "verifyExclusionProof(bytes,bytes,bytes32)": FunctionFragment;
    "verifyInclusionProof(bytes,bytes,bytes,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSingleNodeRootHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExclusionProof",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyInclusionProof",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSingleNodeRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyExclusionProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyInclusionProof",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestLibSecureMerkleTrie extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestLibSecureMerkleTrieInterface;

  functions: {
    get(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    "get(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    getSingleNodeRootHash(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getSingleNodeRootHash(bytes,bytes)"(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    update(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "update(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    verifyExclusionProof(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyExclusionProof(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verifyInclusionProof(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyInclusionProof(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  get(
    _key: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: string;
  }>;

  "get(bytes,bytes,bytes32)"(
    _key: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: string;
  }>;

  getSingleNodeRootHash(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSingleNodeRootHash(bytes,bytes)"(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  update(
    _key: BytesLike,
    _value: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "update(bytes,bytes,bytes,bytes32)"(
    _key: BytesLike,
    _value: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyExclusionProof(
    _key: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyExclusionProof(bytes,bytes,bytes32)"(
    _key: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyInclusionProof(
    _key: BytesLike,
    _value: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyInclusionProof(bytes,bytes,bytes,bytes32)"(
    _key: BytesLike,
    _value: BytesLike,
    _proof: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    get(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    "get(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: string;
    }>;

    getSingleNodeRootHash(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSingleNodeRootHash(bytes,bytes)"(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "update(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyExclusionProof(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyExclusionProof(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyInclusionProof(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyInclusionProof(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    get(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSingleNodeRootHash(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSingleNodeRootHash(bytes,bytes)"(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "update(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExclusionProof(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyExclusionProof(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyInclusionProof(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyInclusionProof(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSingleNodeRootHash(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSingleNodeRootHash(bytes,bytes)"(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "update(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExclusionProof(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyExclusionProof(bytes,bytes,bytes32)"(
      _key: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyInclusionProof(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyInclusionProof(bytes,bytes,bytes,bytes32)"(
      _key: BytesLike,
      _value: BytesLike,
      _proof: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { HelperSimpleProxy } from "./HelperSimpleProxy";

export class HelperSimpleProxyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<HelperSimpleProxy> {
    return super.deploy(overrides || {}) as Promise<HelperSimpleProxy>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HelperSimpleProxy {
    return super.attach(address) as HelperSimpleProxy;
  }
  connect(signer: Signer): HelperSimpleProxyFactory {
    return super.connect(signer) as HelperSimpleProxyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HelperSimpleProxy {
    return new Contract(address, _abi, signerOrProvider) as HelperSimpleProxy;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    stateMutability: "nonpayable",
    type: "fallback"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address"
      }
    ],
    name: "setTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x60806040523480156100195760008061001661005a565b50505b505a6100236100c5565b600060018161003061011f565b816001600160a01b0302191690836001600160a01b031602179061005261016b565b5050506101b9565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610092578086015182820160400152602001610077565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561011a57600082820152602001610103565b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610103565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020610103565b61046b806101c86000396000f3fe60806040523480156100195760008061001661021f565b50505b50600436106100345760003560e01c8063776d1a0114610091575b61008f6000600161004361028a565b906101000a90046001600160a01b03166000368080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152506100c092505050565b005b61008f600480360360208110156100b0576000806100ad61021f565b50505b50356001600160a01b031661019a565b600080836001600160a01b0316836040518082805190602001908083835b602083106100fd5780518252601f1990920191602091820191016100de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a6101376102ea565b5050505050509150503d806000811461016c576040513d603f01601f191681016040523d815291503d6000602084013e610171565b606091505b5091509150811561018457805160208201f35b80516020820161019261021f565b505050505050565b6000806101a561028a565b906101000a90046001600160a01b03166001600160a01b03165a6101c76103d7565b6001600160a01b0316141561020d5780600180806101e361028a565b816001600160a01b0302191690836001600160a01b031602179061020561041d565b50505061021c565b61021c6000600161004361028a565b50565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561025757808601518282016040015260200161023c565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156102e5576000828201526020016102ce565b505050565b6385979f76598160e01b815261031d565b80808311156103075750815b92915050565b8080831015610307575090919050565b836004820152846024820152606060448201528760648201526084810160005b8981101561035557808901518282015260200161033d565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596103aa8e3d61030d565b8d016103b681876102fb565b5b828110156103cb57600081526020016103b7565b50929d50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206102ce565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206102ce56";

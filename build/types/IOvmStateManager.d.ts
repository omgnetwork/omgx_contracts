/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOvmStateManagerInterface extends ethers.utils.Interface {
  functions: {
    "commitAccount(address)": FunctionFragment;
    "commitContractStorage(address,bytes32)": FunctionFragment;
    "commitPendingAccount(address,address,bytes32)": FunctionFragment;
    "getAccount(address)": FunctionFragment;
    "getAccountEthAddress(address)": FunctionFragment;
    "getAccountNonce(address)": FunctionFragment;
    "getAccountStorageRoot(address)": FunctionFragment;
    "getContractStorage(address,bytes32)": FunctionFragment;
    "getTotalUncommittedAccounts()": FunctionFragment;
    "getTotalUncommittedContractStorage()": FunctionFragment;
    "hasAccount(address)": FunctionFragment;
    "hasContractStorage(address,bytes32)": FunctionFragment;
    "hasEmptyAccount(address)": FunctionFragment;
    "incrementTotalUncommittedAccounts()": FunctionFragment;
    "incrementTotalUncommittedContractStorage()": FunctionFragment;
    "initPendingAccount(address)": FunctionFragment;
    "isAuthenticated(address)": FunctionFragment;
    "ovmExecutionManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "putAccount(address,tuple)": FunctionFragment;
    "putContractStorage(address,bytes32,bytes32)": FunctionFragment;
    "putEmptyAccount(address)": FunctionFragment;
    "setAccountNonce(address,uint256)": FunctionFragment;
    "setExecutionManager(address)": FunctionFragment;
    "testAndSetAccountChanged(address)": FunctionFragment;
    "testAndSetAccountLoaded(address)": FunctionFragment;
    "testAndSetContractStorageChanged(address,bytes32)": FunctionFragment;
    "testAndSetContractStorageLoaded(address,bytes32)": FunctionFragment;
    "wasAccountChanged(address)": FunctionFragment;
    "wasAccountCommitted(address)": FunctionFragment;
    "wasContractStorageChanged(address,bytes32)": FunctionFragment;
    "wasContractStorageCommitted(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitContractStorage",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitPendingAccount",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountEthAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountStorageRoot",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStorage",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUncommittedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUncommittedContractStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasContractStorage",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEmptyAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementTotalUncommittedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementTotalUncommittedContractStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initPendingAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthenticated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ovmExecutionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "putAccount",
    values: [
      string,
      {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "putContractStorage",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "putEmptyAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testAndSetAccountChanged",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testAndSetAccountLoaded",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testAndSetContractStorageChanged",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAndSetContractStorageLoaded",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wasAccountChanged",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wasAccountCommitted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wasContractStorageChanged",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wasContractStorageCommitted",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPendingAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStorageRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUncommittedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUncommittedContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEmptyAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementTotalUncommittedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementTotalUncommittedContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPendingAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthenticated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ovmExecutionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "putAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "putContractStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "putEmptyAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAndSetAccountChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAndSetAccountLoaded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAndSetContractStorageChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAndSetContractStorageLoaded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasAccountChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasAccountCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasContractStorageChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasContractStorageCommitted",
    data: BytesLike
  ): Result;

  events: {};
}

export class IOvmStateManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOvmStateManagerInterface;

  functions: {
    commitAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitPendingAccount(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitPendingAccount(address,address,bytes32)"(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _account: {
        nonce: BigNumber;
        balance: BigNumber;
        storageRoot: string;
        codeHash: string;
        ethAddress: string;
        isFresh: boolean;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
        5: boolean;
      };
      0: {
        nonce: BigNumber;
        balance: BigNumber;
        storageRoot: string;
        codeHash: string;
        ethAddress: string;
        isFresh: boolean;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
        5: boolean;
      };
    }>;

    "getAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _account: {
        nonce: BigNumber;
        balance: BigNumber;
        storageRoot: string;
        codeHash: string;
        ethAddress: string;
        isFresh: boolean;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
        5: boolean;
      };
      0: {
        nonce: BigNumber;
        balance: BigNumber;
        storageRoot: string;
        codeHash: string;
        ethAddress: string;
        isFresh: boolean;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
        5: boolean;
      };
    }>;

    getAccountEthAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _ethAddress: string;
      0: string;
    }>;

    "getAccountEthAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _ethAddress: string;
      0: string;
    }>;

    getAccountNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _nonce: BigNumber;
      0: BigNumber;
    }>;

    "getAccountNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _nonce: BigNumber;
      0: BigNumber;
    }>;

    getAccountStorageRoot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _storageRoot: string;
      0: string;
    }>;

    "getAccountStorageRoot(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _storageRoot: string;
      0: string;
    }>;

    getContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _value: string;
      0: string;
    }>;

    "getContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _value: string;
      0: string;
    }>;

    getTotalUncommittedAccounts(
      overrides?: CallOverrides
    ): Promise<{
      _total: BigNumber;
      0: BigNumber;
    }>;

    "getTotalUncommittedAccounts()"(
      overrides?: CallOverrides
    ): Promise<{
      _total: BigNumber;
      0: BigNumber;
    }>;

    getTotalUncommittedContractStorage(
      overrides?: CallOverrides
    ): Promise<{
      _total: BigNumber;
      0: BigNumber;
    }>;

    "getTotalUncommittedContractStorage()"(
      overrides?: CallOverrides
    ): Promise<{
      _total: BigNumber;
      0: BigNumber;
    }>;

    hasAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    "hasAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    hasContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    "hasContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    hasEmptyAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    "hasEmptyAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      _exists: boolean;
      0: boolean;
    }>;

    incrementTotalUncommittedAccounts(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementTotalUncommittedAccounts()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementTotalUncommittedContractStorage(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementTotalUncommittedContractStorage()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initPendingAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initPendingAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isAuthenticated(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthenticated(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    ovmExecutionManager(
      overrides?: CallOverrides
    ): Promise<{
      _ovmExecutionManager: string;
      0: string;
    }>;

    "ovmExecutionManager()"(
      overrides?: CallOverrides
    ): Promise<{
      _ovmExecutionManager: string;
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      _owner: string;
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      _owner: string;
      0: string;
    }>;

    putAccount(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "putAccount(address,tuple)"(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    putContractStorage(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "putContractStorage(address,bytes32,bytes32)"(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    putEmptyAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "putEmptyAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccountNonce(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountNonce(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExecutionManager(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExecutionManager(address)"(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testAndSetAccountChanged(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testAndSetAccountChanged(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testAndSetAccountLoaded(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testAndSetAccountLoaded(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testAndSetContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testAndSetContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testAndSetContractStorageLoaded(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testAndSetContractStorageLoaded(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wasAccountChanged(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "wasAccountChanged(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wasAccountCommitted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "wasAccountCommitted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wasContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "wasContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wasContractStorageCommitted(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "wasContractStorageCommitted(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  commitAccount(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitAccount(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitContractStorage(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitContractStorage(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitPendingAccount(
    _address: string,
    _ethAddress: string,
    _codeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitPendingAccount(address,address,bytes32)"(
    _address: string,
    _ethAddress: string,
    _codeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccount(
    _address: string,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    balance: BigNumber;
    storageRoot: string;
    codeHash: string;
    ethAddress: string;
    isFresh: boolean;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
    5: boolean;
  }>;

  "getAccount(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    balance: BigNumber;
    storageRoot: string;
    codeHash: string;
    ethAddress: string;
    isFresh: boolean;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
    5: boolean;
  }>;

  getAccountEthAddress(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAccountEthAddress(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccountNonce(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAccountNonce(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountStorageRoot(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAccountStorageRoot(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractStorage(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getContractStorage(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalUncommittedAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalUncommittedAccounts()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalUncommittedContractStorage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalUncommittedContractStorage()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasAccount(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "hasAccount(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasContractStorage(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasContractStorage(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasEmptyAccount(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasEmptyAccount(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incrementTotalUncommittedAccounts(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementTotalUncommittedAccounts()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementTotalUncommittedContractStorage(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementTotalUncommittedContractStorage()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initPendingAccount(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initPendingAccount(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isAuthenticated(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthenticated(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ovmExecutionManager(overrides?: CallOverrides): Promise<string>;

  "ovmExecutionManager()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  putAccount(
    _address: string,
    _account: {
      nonce: BigNumberish;
      balance: BigNumberish;
      storageRoot: BytesLike;
      codeHash: BytesLike;
      ethAddress: string;
      isFresh: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "putAccount(address,tuple)"(
    _address: string,
    _account: {
      nonce: BigNumberish;
      balance: BigNumberish;
      storageRoot: BytesLike;
      codeHash: BytesLike;
      ethAddress: string;
      isFresh: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  putContractStorage(
    _contract: string,
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "putContractStorage(address,bytes32,bytes32)"(
    _contract: string,
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  putEmptyAccount(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "putEmptyAccount(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccountNonce(
    _address: string,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountNonce(address,uint256)"(
    _address: string,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExecutionManager(
    _ovmExecutionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExecutionManager(address)"(
    _ovmExecutionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testAndSetAccountChanged(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testAndSetAccountChanged(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testAndSetAccountLoaded(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testAndSetAccountLoaded(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testAndSetContractStorageChanged(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testAndSetContractStorageChanged(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testAndSetContractStorageLoaded(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testAndSetContractStorageLoaded(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wasAccountChanged(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "wasAccountChanged(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wasAccountCommitted(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "wasAccountCommitted(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wasContractStorageChanged(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "wasContractStorageChanged(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wasContractStorageCommitted(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "wasContractStorageCommitted(address,bytes32)"(
    _contract: string,
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    commitAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "commitAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "commitContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitPendingAccount(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitPendingAccount(address,address,bytes32)"(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      balance: BigNumber;
      storageRoot: string;
      codeHash: string;
      ethAddress: string;
      isFresh: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: boolean;
    }>;

    "getAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      balance: BigNumber;
      storageRoot: string;
      codeHash: string;
      ethAddress: string;
      isFresh: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: boolean;
    }>;

    getAccountEthAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAccountEthAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountStorageRoot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAccountStorageRoot(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalUncommittedAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalUncommittedAccounts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUncommittedContractStorage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalUncommittedContractStorage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccount(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "hasAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasEmptyAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasEmptyAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incrementTotalUncommittedAccounts(overrides?: CallOverrides): Promise<void>;

    "incrementTotalUncommittedAccounts()"(
      overrides?: CallOverrides
    ): Promise<void>;

    incrementTotalUncommittedContractStorage(
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementTotalUncommittedContractStorage()"(
      overrides?: CallOverrides
    ): Promise<void>;

    initPendingAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initPendingAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthenticated(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthenticated(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ovmExecutionManager(overrides?: CallOverrides): Promise<string>;

    "ovmExecutionManager()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    putAccount(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "putAccount(address,tuple)"(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    putContractStorage(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "putContractStorage(address,bytes32,bytes32)"(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    putEmptyAccount(_address: string, overrides?: CallOverrides): Promise<void>;

    "putEmptyAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountNonce(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAccountNonce(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutionManager(
      _ovmExecutionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExecutionManager(address)"(
      _ovmExecutionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testAndSetAccountChanged(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "testAndSetAccountChanged(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testAndSetAccountLoaded(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "testAndSetAccountLoaded(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testAndSetContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "testAndSetContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testAndSetContractStorageLoaded(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "testAndSetContractStorageLoaded(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wasAccountChanged(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wasAccountChanged(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wasAccountCommitted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wasAccountCommitted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wasContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wasContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wasContractStorageCommitted(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wasContractStorageCommitted(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    commitAccount(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "commitAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitPendingAccount(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitPendingAccount(address,address,bytes32)"(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccount(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountEthAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountEthAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountStorageRoot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountStorageRoot(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUncommittedAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalUncommittedAccounts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUncommittedContractStorage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalUncommittedContractStorage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccount(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasEmptyAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasEmptyAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementTotalUncommittedAccounts(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementTotalUncommittedAccounts()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementTotalUncommittedContractStorage(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementTotalUncommittedContractStorage()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    initPendingAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initPendingAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isAuthenticated(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthenticated(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ovmExecutionManager(overrides?: CallOverrides): Promise<BigNumber>;

    "ovmExecutionManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    putAccount(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "putAccount(address,tuple)"(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    putContractStorage(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "putContractStorage(address,bytes32,bytes32)"(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    putEmptyAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "putEmptyAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAccountNonce(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountNonce(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExecutionManager(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExecutionManager(address)"(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testAndSetAccountChanged(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testAndSetAccountChanged(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testAndSetAccountLoaded(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testAndSetAccountLoaded(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testAndSetContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testAndSetContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testAndSetContractStorageLoaded(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testAndSetContractStorageLoaded(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wasAccountChanged(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wasAccountChanged(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wasAccountCommitted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wasAccountCommitted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wasContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wasContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wasContractStorageCommitted(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wasContractStorageCommitted(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitPendingAccount(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitPendingAccount(address,address,bytes32)"(
      _address: string,
      _ethAddress: string,
      _codeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountEthAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountEthAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountStorageRoot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountStorageRoot(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUncommittedAccounts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalUncommittedAccounts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUncommittedContractStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalUncommittedContractStorage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasContractStorage(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasContractStorage(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasEmptyAccount(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasEmptyAccount(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementTotalUncommittedAccounts(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementTotalUncommittedAccounts()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementTotalUncommittedContractStorage(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementTotalUncommittedContractStorage()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initPendingAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initPendingAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isAuthenticated(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthenticated(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ovmExecutionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ovmExecutionManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    putAccount(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "putAccount(address,tuple)"(
      _address: string,
      _account: {
        nonce: BigNumberish;
        balance: BigNumberish;
        storageRoot: BytesLike;
        codeHash: BytesLike;
        ethAddress: string;
        isFresh: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    putContractStorage(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "putContractStorage(address,bytes32,bytes32)"(
      _contract: string,
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    putEmptyAccount(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "putEmptyAccount(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAccountNonce(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountNonce(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExecutionManager(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExecutionManager(address)"(
      _ovmExecutionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testAndSetAccountChanged(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testAndSetAccountChanged(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testAndSetAccountLoaded(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testAndSetAccountLoaded(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testAndSetContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testAndSetContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testAndSetContractStorageLoaded(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testAndSetContractStorageLoaded(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wasAccountChanged(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wasAccountChanged(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasAccountCommitted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wasAccountCommitted(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasContractStorageChanged(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wasContractStorageChanged(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasContractStorageCommitted(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wasContractStorageCommitted(address,bytes32)"(
      _contract: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OvmL1MultiMessageRelayerInterface extends ethers.utils.Interface {
  functions: {
    "batchRelayMessages(tuple[])": FunctionFragment;
    "libAddressManager()": FunctionFragment;
    "resolve(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchRelayMessages",
    values: [
      {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "libAddressManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "batchRelayMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {};
}

export class OvmL1MultiMessageRelayer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OvmL1MultiMessageRelayerInterface;

  functions: {
    batchRelayMessages(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchRelayMessages(tuple[])"(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    libAddressManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  batchRelayMessages(
    _messages: {
      target: string;
      sender: string;
      message: BytesLike;
      messageNonce: BigNumberish;
      proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      };
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchRelayMessages(tuple[])"(
    _messages: {
      target: string;
      sender: string;
      message: BytesLike;
      messageNonce: BigNumberish;
      proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      };
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  libAddressManager(overrides?: CallOverrides): Promise<string>;

  "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

  resolve(_name: string, overrides?: CallOverrides): Promise<string>;

  "resolve(string)"(_name: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchRelayMessages(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchRelayMessages(tuple[])"(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    libAddressManager(overrides?: CallOverrides): Promise<string>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

    resolve(_name: string, overrides?: CallOverrides): Promise<string>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    batchRelayMessages(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchRelayMessages(tuple[])"(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<BigNumber>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    resolve(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchRelayMessages(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchRelayMessages(tuple[])"(
      _messages: {
        target: string;
        sender: string;
        message: BytesLike;
        messageNonce: BigNumberish;
        proof: {
          stateRoot: BytesLike;
          stateRootBatchHeader: {
            batchIndex: BigNumberish;
            batchRoot: BytesLike;
            batchSize: BigNumberish;
            prevTotalElements: BigNumberish;
            extraData: BytesLike;
          };
          stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
          stateTrieWitness: BytesLike;
          storageTrieWitness: BytesLike;
        };
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    libAddressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

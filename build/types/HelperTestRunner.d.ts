/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HelperTestRunnerInterface extends ethers.utils.Interface {
  functions: {
    "runMultipleTestSteps(tuple[])": FunctionFragment;
    "runSingleTestStep(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "runMultipleTestSteps",
    values: [
      {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "runSingleTestStep",
    values: [
      {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "runMultipleTestSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runSingleTestStep",
    data: BytesLike
  ): Result;

  events: {};
}

export class HelperTestRunner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HelperTestRunnerInterface;

  functions: {
    runMultipleTestSteps(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "runMultipleTestSteps(tuple[])"(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    runSingleTestStep(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "runSingleTestStep(tuple)"(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  runMultipleTestSteps(
    _steps: {
      functionName: string;
      functionData: BytesLike;
      expectedReturnStatus: boolean;
      expectedReturnData: BytesLike;
      onlyValidateFlag: boolean;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "runMultipleTestSteps(tuple[])"(
    _steps: {
      functionName: string;
      functionData: BytesLike;
      expectedReturnStatus: boolean;
      expectedReturnData: BytesLike;
      onlyValidateFlag: boolean;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  runSingleTestStep(
    _step: {
      functionName: string;
      functionData: BytesLike;
      expectedReturnStatus: boolean;
      expectedReturnData: BytesLike;
      onlyValidateFlag: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "runSingleTestStep(tuple)"(
    _step: {
      functionName: string;
      functionData: BytesLike;
      expectedReturnStatus: boolean;
      expectedReturnData: BytesLike;
      onlyValidateFlag: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    runMultipleTestSteps(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "runMultipleTestSteps(tuple[])"(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    runSingleTestStep(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "runSingleTestStep(tuple)"(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    runMultipleTestSteps(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "runMultipleTestSteps(tuple[])"(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    runSingleTestStep(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "runSingleTestStep(tuple)"(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    runMultipleTestSteps(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "runMultipleTestSteps(tuple[])"(
      _steps: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    runSingleTestStep(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "runSingleTestStep(tuple)"(
      _step: {
        functionName: string;
        functionData: BytesLike;
        expectedReturnStatus: boolean;
        expectedReturnData: BytesLike;
        onlyValidateFlag: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { TestLibRingBuffer } from "./TestLibRingBuffer";

export class TestLibRingBufferFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestLibRingBuffer> {
    return super.deploy(overrides || {}) as Promise<TestLibRingBuffer>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLibRingBuffer {
    return super.attach(address) as TestLibRingBuffer;
  }
  connect(signer: Signer): TestLibRingBufferFactory {
    return super.connect(signer) as TestLibRingBufferFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibRingBuffer {
    return new Contract(address, _abi, signerOrProvider) as TestLibRingBuffer;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "get",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_value",
        type: "bytes32"
      },
      {
        internalType: "bytes27",
        name: "_extraData",
        type: "bytes27"
      }
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610516806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632015276c1461003b5780639507d39a14610050575b600080fd5b61004e6100493660046104af565b610079565b005b61006361005e3660046104e8565b610089565b6040516100709190610500565b60405180910390f35b6100856000838361009b565b5050565b600061009581836101a2565b92915050565b60006100a6846103ab565b905060006100cb826040015167ffffffffffffffff168661040b90919063ffffffff16565b80549091506100d957601081555b8054608083015183510364ffffffffff1610610150578460060154826080015164ffffffffff1610156101485760408201805160010167ffffffffffffffff169081905260808301805164ffffffffff9081166060860152845116905261014190869061040b565b9050610150565b805460020281555b608082015182510364ffffffffff9081166000818152600184810160209081526040909220889055855101909216845264ffffffffff1985169184019190915261019a868461042b565b505050505050565b6000806101ae846103ab565b805190915064ffffffffff168310610204576040805162461bcd60e51b815260206004820152601460248201527324b73232bc1037baba1037b3103137bab732399760611b604482015290519081900360640190fd5b6000610227826040015167ffffffffffffffff168661040b90919063ffffffff16565b9050600061024f836040015160010167ffffffffffffffff168761040b90919063ffffffff16565b9050826080015164ffffffffff1685106102dc576080830151825464ffffffffff90911686039081106102c0576040805162461bcd60e51b815260206004820152601460248201527324b73232bc1037baba1037b3103137bab732399760611b604482015290519081900360640190fd5b6000908152600190920160205250604090205491506100959050565b6080830151606084015164ffffffffff918216878103929091161061033f576040805162461bcd60e51b815260206004820152601460248201527324b73232bc1037baba1037b3103137bab732399760611b604482015290519081900360640190fd5b815481111561038c576040805162461bcd60e51b815260206004820152601460248201527324b73232bc1037baba1037b3103137bab732399760611b604482015290519081900360640190fd5b8154036000908152600190910160205260409020549250610095915050565b6103b3610481565b5080546001909101546040805160a08101825264ffffffffff808516825264ffffffffff19909416602082015267ffffffffffffffff8316818301529082901c8316606082015260689190911c909116608082015290565b6000600282061561041f5782600401610424565b826002015b9392505050565b80516020820151604080840151606085015160808601518754858717969483901b8417606883901b1795939291908714610463578689555b8589600101541461047657600189018690555b505050505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b600080604083850312156104c1578182fd5b82359150602083013564ffffffffff19811681146104dd578182fd5b809150509250929050565b6000602082840312156104f9578081fd5b5035919050565b9081526020019056fea164736f6c6343000706000a";

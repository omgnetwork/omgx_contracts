/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { TestLibEthUtils } from "./TestLibEthUtils";

export class TestLibEthUtilsFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestLibEthUtils> {
    return super.deploy(overrides || {}) as Promise<TestLibEthUtils>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLibEthUtils {
    return super.attach(address) as TestLibEthUtils;
  }
  connect(signer: Signer): TestLibEthUtilsFactory {
    return super.connect(signer) as TestLibEthUtilsFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibEthUtils {
    return new Contract(address, _abi, signerOrProvider) as TestLibEthUtils;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes"
      }
    ],
    name: "createContract",
    outputs: [
      {
        internalType: "address",
        name: "_created",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_creator",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      }
    ],
    name: "getAddressForCREATE",
    outputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_creator",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes"
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32"
      }
    ],
    name: "getAddressForCREATE2",
    outputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_offset",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_length",
        type: "uint256"
      }
    ],
    name: "getCode",
    outputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getCode",
    outputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getCodeHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "_codeHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address"
      }
    ],
    name: "getCodeSize",
    outputs: [
      {
        internalType: "uint256",
        name: "_codeSize",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638c6351ab1161005b5780638c6351ab146100de57806390042baf146100fe578063a354eda914610111578063b51c4f96146101245761007d565b80630250cc8c146100825780637e105ce2146100ab57806381ea4408146100be575b600080fd5b610095610090366004610880565b610137565b6040516100a29190610987565b60405180910390f35b6100956100b93660046107e8565b61014c565b6100d16100cc3660046107e8565b61015f565b6040516100a2919061096a565b6100f16100ec366004610857565b61016a565b6040516100a29190610973565b6100f161010c3660046108b2565b61017d565b6100f161011f366004610802565b610188565b6100d16101323660046107e8565b610195565b60606101448484846101a0565b949350505050565b6060610157826101c4565b90505b919050565b6000610157826101da565b600061017683836101de565b9392505050565b600061015782610278565b600061014484848461028b565b6000610157826102d1565b6060806040519050602083018101604052828152828460208301873c949350505050565b60606101578260006101d5856102d1565b6101a0565b3f90565b60408051600280825260608201909252600091829190816020015b60608152602001906001900390816101f9579050509050610219846102d5565b8160008151811061022657fe5b602002602001018190525061023a836102ff565b8160018151811061024757fe5b6020026020010181905250600061025d82610312565b905061026f8180519060200120610356565b95945050505050565b6000808251602084016000f09392505050565b60008060ff60f81b858486805190602001206040516020016102b09493929190610902565b60405160208183030381529060405280519060200120905061026f81610356565b3b90565b6060610157826040516020016102eb91906108e5565b604051602081830303815290604052610359565b606061015761030d836103c2565b610359565b6060600061031f836104c7565b905061032d815160c06105c8565b8160405160200161033f92919061093b565b604051602081830303815290604052915050919050565b90565b60608082516001148015610381575060808360008151811061037757fe5b016020015160f81c105b1561038d575081610157565b610399835160806105c8565b836040516020016103ab92919061093b565b604051602081830303815290604052905092915050565b60606000826040516020016103d7919061096a565b604051602081830303815290604052905060005b60208110156104215781818151811061040057fe5b01602001516001600160f81b0319161561041957610421565b6001016103eb565b60008160200367ffffffffffffffff8111801561043d57600080fd5b506040519080825280601f01601f191660200182016040528015610468576020820181803683370190505b50905060005b81518110156104be57835160018401938591811061048857fe5b602001015160f81c60f81b82828151811061049f57fe5b60200101906001600160f81b031916908160001a90535060010161046e565b50949350505050565b60608151600014156104e8575060408051600081526020810190915261015a565b6000805b835181101561051b5783818151811061050157fe5b6020026020010151518201915080806001019150506104ec565b60008267ffffffffffffffff8111801561053457600080fd5b506040519080825280601f01601f19166020018201604052801561055f576020820181803683370190505b50600092509050602081015b85518310156104be57600086848151811061058257fe5b6020026020010151905060006020820190506105a083828451610718565b8785815181106105ac57fe5b602002602001015151830192505050828060010193505061056b565b6060806038841015610622576040805160018082528183019092529060208201818036833701905050905082840160f81b8160008151811061060657fe5b60200101906001600160f81b031916908160001a905350610176565b600060015b80868161063057fe5b04156106455760019091019061010002610627565b8160010167ffffffffffffffff8111801561065f57600080fd5b506040519080825280601f01601f19166020018201604052801561068a576020820181803683370190505b50925084820160370160f81b836000815181106106a357fe5b60200101906001600160f81b031916908160001a905350600190505b81811161070f576101008183036101000a87816106d857fe5b04816106e057fe5b0660f81b8382815181106106f057fe5b60200101906001600160f81b031916908160001a9053506001016106bf565b50509392505050565b8282825b6020811061073b578151835260209283019290910190601f190161071c565b905182516020929092036101000a6000190180199091169116179052505050565b80356001600160a01b038116811461015a57600080fd5b600082601f830112610783578081fd5b813567ffffffffffffffff8082111561079857fe5b604051601f8301601f1916810160200182811182821017156107b657fe5b6040528281528483016020018610156107cd578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156107f9578081fd5b6101768261075c565b600080600060608486031215610816578182fd5b61081f8461075c565b9250602084013567ffffffffffffffff81111561083a578283fd5b61084686828701610773565b925050604084013590509250925092565b60008060408385031215610869578182fd5b6108728361075c565b946020939093013593505050565b600080600060608486031215610894578283fd5b61089d8461075c565b95602085013595506040909401359392505050565b6000602082840312156108c3578081fd5b813567ffffffffffffffff8111156108d9578182fd5b61014484828501610773565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b6000835161094d8184602088016109ba565b8351908301906109618183602088016109ba565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b60006020825282518060208401526109a68160408501602087016109ba565b601f01601f19169190910160400192915050565b60005b838110156109d55781810151838201526020016109bd565b838111156109e4576000848401525b5050505056fea164736f6c6343000706000a";

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { TestLibRlpReader } from "./TestLibRlpReader";

export class TestLibRlpReaderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestLibRlpReader> {
    return super.deploy(overrides || {}) as Promise<TestLibRlpReader>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLibRlpReader {
    return super.attach(address) as TestLibRlpReader;
  }
  connect(signer: Signer): TestLibRlpReaderFactory {
    return super.connect(signer) as TestLibRlpReaderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibRlpReader {
    return new Contract(address, _abi, signerOrProvider) as TestLibRlpReader;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readBool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readList",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes"
      }
    ],
    name: "readUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d2e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f71b98d1161005b5780635f71b98d146100eb57806384147d531461010b5780638b33268b1461011e578063a39d3671146101315761007d565b806316b3269e1461008257806331d12cd3146100ab578063359835b5146100cb575b600080fd5b610095610090366004610b44565b610151565b6040516100a29190610ca3565b60405180910390f35b6100be6100b9366004610b44565b610164565b6040516100a29190610cac565b6100de6100d9366004610b44565b61016f565b6040516100a29190610c38565b6100fe6100f9366004610b44565b61021e565b6040516100a29190610c98565b610095610119366004610b44565b610229565b6100be61012c366004610b44565b610234565b61014461013f366004610b44565b61023f565b6040516100a29190610c24565b600061015c8261024a565b90505b919050565b606061015c8261025d565b6060600061017c83610270565b90506000815167ffffffffffffffff8111801561019857600080fd5b506040519080825280602002602001820160405280156101cc57816020015b60608152602001906001900390816101b75790505b50905060005b8151811015610216576101f78382815181106101ea57fe5b6020026020010151610283565b82828151811061020357fe5b60209081029190910101526001016101d2565b509392505050565b600061015c8261028e565b600061015c826102a1565b606061015c826102b4565b600061015c826102c7565b600061015c610258836102da565b6102ff565b606061015c61026b836102da565b61030a565b606061015c61027e836102da565b610315565b606061015c8261048b565b600061015c61029c836102da565b6104a1565b600061015c6102af836102da565b610555565b606061015c6102c2836102da565b61064f565b600061015c6102d5836102da565b6106de565b6102e2610b2a565b506040805180820190915281518152602082810190820152919050565b600061015c82610555565b606061015c8261064f565b606060008061032384610752565b9193509091506001905081600181111561033957fe5b1461038b576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e000000000000000000604482015290519081900360640190fd5b6040805160208082526104208201909252600091816020015b6103ac610b2a565b8152602001906001900390816103a45790505090506000835b8651811015610480576020821061040d5760405162461bcd60e51b815260040180806020018281038252602a815260200180610cc0602a913960400191505060405180910390fd5b6000806104396040518060400160405280858c60000151038152602001858c6020015101815250610752565b509150915060405180604001604052808383018152602001848b602001510181525085858151811061046757fe5b60209081029190910101526001939093019201016103c5565b508152949350505050565b606061015c826020015160008460000151610a7b565b80516000906001146104fa576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020626f6f6c65616e2076616c75652e000000000000604482015290519081900360640190fd5b6020820151805160001a8015806105115750806001145b61054c5760405162461bcd60e51b8152600401808060200182810382526038815260200180610cea6038913960400191505060405180910390fd5b15159392505050565b60006021826000015111156105b1576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b60008060006105bf85610752565b9194509250905060008160018111156105d457fe5b14610626576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b6020808601518401805190918410156106455760208490036101000a90045b9695505050505050565b6060600080600061065f85610752565b91945092509050600081600181111561067457fe5b146106c6576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e0000000000000000604482015290519081900360640190fd5b6106d585602001518484610a7b565b95945050505050565b8051600090600114156106f35750600061015f565b8151601514610749576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020616464726573732076616c75652e000000000000604482015290519081900360640190fd5b61015c826102ff565b6000806000808460000151116107af576040805162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e0000000000000000604482015290519081900360640190fd5b6020840151805160001a607f81116107d4576000600160009450945094505050610a74565b60b78111610849578551607f198201908110610837576040805162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e00000000000000604482015290519081900360640190fd5b60019550935060009250610a74915050565b60bf811161092d57855160b61982019081106108ac576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e00604482015290519081900360640190fd5b6000816020036101000a6001850151049050808201886000015111610918576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e0000000000000000604482015290519081900360640190fd5b60019091019550935060009250610a74915050565b60f781116109a157855160bf198201908110610990576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e000000000000000000604482015290519081900360640190fd5b600195509350849250610a74915050565b855160f61982019081106109fc576040805162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e000000604482015290519081900360640190fd5b6000816020036101000a6001850151049050808201886000015111610a61576040805162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b604482015290519081900360640190fd5b6001918201965094509250610a74915050565b9193909250565b606060008267ffffffffffffffff81118015610a9657600080fd5b506040519080825280601f01601f191660200182016040528015610ac1576020820181803683370190505b509050805160001415610ad5579050610b23565b8484016020820160005b60208604811015610b00578251825260209283019290910190600101610adf565b5080519151601f86166020036101000a6000190192831692191691909117905290505b9392505050565b604051806040016040528060008152602001600081525090565b60006020808385031215610b56578182fd5b823567ffffffffffffffff80821115610b6d578384fd5b818501915085601f830112610b80578384fd5b813581811115610b8c57fe5b604051601f8201601f1916810185018381118282101715610ba957fe5b6040528181528382018501881015610bbf578586fd5b818585018683013790810190930193909352509392505050565b60008151808452815b81811015610bfe57602081850181015186830182015201610be2565b81811115610c0f5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610c8b57603f19888603018452610c79858351610bd9565b94509285019290850190600101610c5d565b5092979650505050505050565b901515815260200190565b90815260200190565b600060208252610b236020830184610bd956fe50726f766964656420524c50206c6973742065786365656473206d6178206c697374206c656e6774682e4c69625f524c505265616465723a20496e76616c696420524c5020626f6f6c65616e2076616c75652c206d7573742062652030206f722031a164736f6c6343000706000a";

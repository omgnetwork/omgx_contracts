/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OvmL1CustomCrossDomainMessengerInterface
  extends ethers.utils.Interface {
  functions: {
    "initialize(address)": FunctionFragment;
    "libAddressManager()": FunctionFragment;
    "messageNonce()": FunctionFragment;
    "relayMessage(address,address,bytes,uint256,tuple)": FunctionFragment;
    "relayedMessages(bytes32)": FunctionFragment;
    "replayMessage(address,address,bytes,uint256,uint32)": FunctionFragment;
    "resolve(string)": FunctionFragment;
    "sendMessage(address,bytes,uint32)": FunctionFragment;
    "sentMessages(bytes32)": FunctionFragment;
    "successfulMessages(bytes32)": FunctionFragment;
    "xDomainMessageSender()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "libAddressManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessage",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relayedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replayMessage",
    values: [string, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "libAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;

  events: {
    "FailedRelayedMessage(bytes32)": EventFragment;
    "RelayedMessage(bytes32)": EventFragment;
    "SentMessage(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FailedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
}

export class OvmL1CustomCrossDomainMessenger extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OvmL1CustomCrossDomainMessengerInterface;

  functions: {
    initialize(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    libAddressManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    messageNonce(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "messageNonce()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    relayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "relayMessage(address,address,bytes,uint256,tuple)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    relayedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "relayedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    replayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replayMessage(address,address,bytes,uint256,uint32)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "sentMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "successfulMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "xDomainMessageSender()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  initialize(
    _libAddressManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _libAddressManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  libAddressManager(overrides?: CallOverrides): Promise<string>;

  "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

  messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  "messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  relayMessage(
    _target: string,
    _sender: string,
    _message: BytesLike,
    _messageNonce: BigNumberish,
    _proof: {
      stateRoot: BytesLike;
      stateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      };
      stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
      stateTrieWitness: BytesLike;
      storageTrieWitness: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "relayMessage(address,address,bytes,uint256,tuple)"(
    _target: string,
    _sender: string,
    _message: BytesLike,
    _messageNonce: BigNumberish,
    _proof: {
      stateRoot: BytesLike;
      stateRootBatchHeader: {
        batchIndex: BigNumberish;
        batchRoot: BytesLike;
        batchSize: BigNumberish;
        prevTotalElements: BigNumberish;
        extraData: BytesLike;
      };
      stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
      stateTrieWitness: BytesLike;
      storageTrieWitness: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  relayedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "relayedMessages(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  replayMessage(
    _target: string,
    _sender: string,
    _message: BytesLike,
    _messageNonce: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replayMessage(address,address,bytes,uint256,uint32)"(
    _target: string,
    _sender: string,
    _message: BytesLike,
    _messageNonce: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolve(_name: string, overrides?: CallOverrides): Promise<string>;

  "resolve(string)"(_name: string, overrides?: CallOverrides): Promise<string>;

  sendMessage(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendMessage(address,bytes,uint32)"(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "sentMessages(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  successfulMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "successfulMessages(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  "xDomainMessageSender()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initialize(
      _libAddressManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _libAddressManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    libAddressManager(overrides?: CallOverrides): Promise<string>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<string>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "relayMessage(address,address,bytes,uint256,tuple)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    relayedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "relayedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    replayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "replayMessage(address,address,bytes,uint256,uint32)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(_name: string, overrides?: CallOverrides): Promise<string>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sentMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "sentMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "successfulMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

    "xDomainMessageSender()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FailedRelayedMessage(msgHash: null): EventFilter;

    RelayedMessage(msgHash: null): EventFilter;

    SentMessage(message: null): EventFilter;
  };

  estimateGas: {
    initialize(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<BigNumber>;

    "libAddressManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "messageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "relayMessage(address,address,bytes,uint256,tuple)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    relayedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "relayedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replayMessage(address,address,bytes,uint256,uint32)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolve(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sentMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "successfulMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;

    "xDomainMessageSender()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _libAddressManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    libAddressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "libAddressManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "messageNonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "relayMessage(address,address,bytes,uint256,tuple)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _proof: {
        stateRoot: BytesLike;
        stateRootBatchHeader: {
          batchIndex: BigNumberish;
          batchRoot: BytesLike;
          batchSize: BigNumberish;
          prevTotalElements: BigNumberish;
          extraData: BytesLike;
        };
        stateRootProof: { index: BigNumberish; siblings: BytesLike[] };
        stateTrieWitness: BytesLike;
        storageTrieWitness: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    relayedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "relayedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    replayMessage(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replayMessage(address,address,bytes,uint256,uint32)"(
      _target: string,
      _sender: string,
      _message: BytesLike,
      _messageNonce: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolve(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sentMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sentMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "successfulMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xDomainMessageSender()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

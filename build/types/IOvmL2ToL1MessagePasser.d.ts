/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOvmL2ToL1MessagePasserInterface extends ethers.utils.Interface {
  functions: {
    "passMessageToL1(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "passMessageToL1",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "passMessageToL1",
    data: BytesLike
  ): Result;

  events: {
    "L2ToL1Message(uint256,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L2ToL1Message"): EventFragment;
}

export class IOvmL2ToL1MessagePasser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOvmL2ToL1MessagePasserInterface;

  functions: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "passMessageToL1(bytes)"(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  passMessageToL1(
    _message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "passMessageToL1(bytes)"(
    _message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "passMessageToL1(bytes)"(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    L2ToL1Message(_nonce: null, _sender: null, _data: null): EventFilter;
  };

  estimateGas: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "passMessageToL1(bytes)"(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    passMessageToL1(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "passMessageToL1(bytes)"(
      _message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
